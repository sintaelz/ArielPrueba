.\"--------------------------------------------------------
.\" MODULE      : $RCSfile: ctcpost.1 $
.\" PART OF     : CTC++
.\" VERSION     : $Revision: 1.29 $, $Date: 2016/12/23 11:21:58 $
.\" AUTHOR      : $Author: olavi $
.\" DESCRIPTION : ctcpost manual page
.\"
.\"             Copyright (c) 2012-2013 Testwell Oy
.\"             Copyright (c) 2013-2016 Verifysoft Technology GmbH
.\"
.\" LAST EDITED : 23.12.2016
.\"--------------------------------------------------------
.TH ctcpost 1 "23 December 2016"
.SH NAME
ctcpost - CTC++ Postprocessor (v8.1)
          (CTC++, Test Coverage Analyzer for C/C++)

.SH SYNOPSIS
.ad l
.HP 8
.BR ctcpost " [general-options]"
.br
[symbolfile]...
.br
[datafile]...
.br
.RB [ -ff |
.BR -fd |
.BR -fc |
.BR -fmcdc ]
.br
.RB [ -nhe ]
.br
.RB [ -w " listing-width]"
.br
.RB {{ -p |
.BR -u |
.BR -t |
.BR -x "} reportfile}..."
.HP 8
.BR ctcpost " [general-options]"
.br
datafile...
.BR -a " target-datafile"
.br
.HP 8
.BR ctcpost " [general-options]"
.br
symbolfile...
.BR -a " target-symbolfile"
.br
.HP 8
.BR ctcpost " [general-options]"
.br
.RB { -l |
.BR -L "}{ symbolfile| datafile}..."
.HP 8
[general-options]:
.br
.RB [ -h ]
.RB [ -V ]
.br
.RB [ @ "optionsfile]..."
.br
.RB [ -c " conf-file[;conf-file]...]..."
.br
.RB [ -C " conf-param{=value|+value|-value}]..."
.br
.RB [ -f " source-file[;source-file]...]..."
.br
.RB [ -nf " source-file[;source-file]...]..."
.ad n

.SH DESCRIPTION
The
.B ctcpost
(CTC++ Postprocessor) program is a part of CTC++, Test Coverage
Analyzer for C/C++. The other parts are
.B ctc
(CTC++ Preprocessor), with which your program under test is instrumented,
the CTC++ run-time library (linked into the instrumented program),
which provides the necessary run-time services, and the ctc2html
utility, which is used to produce an HTML document from an
execution profile listing.

.B ctcpost
is used to produce various human readable test coverage	listings
based on the symbolfile(s) and datafile(s). The report can be
produced also in XML  format. The symbolfile contains descriptions
of the source files under test and it is generated by the CTC++
preprocessor, when the source code is instrumented. The datafile
contains the execution information in binary format. It is written
by the instrumented program normally just before the program exits.
The execution information is collected cumulatively over multiple
test runs. See
.BR ctc (1)
for information about the preprocessor and the instrumented program.

The execution profile listing produced by ctcpost can be converted
to HTML format by the ctc2html utility. The HTML document contains
a hierarchical listing of the test coverage including your source
code as part of the report. See
.BR ctc2html (1)
for more information.

The listings produced by ctcpost give a view to the dynamic behavior
of the program, especially what parts of the program have and have
not been executed during the test sessions. The information is
presented in terms of the original source code files that were
instrumented (file name, line number, control structure, etc.).
The code portions not executed at all are revealed and that information
helps you to derive a more thorough test suite in a cost-effective
manner. Also, the execution counters are shown and they give a view
of the dynamic behavior of the program, which in turn can be used,
for example, in optimizing the program algorithm. What information
there will actually be in those listings depends on what instrumentation
modes you have selected at the instrumentation phase.

The different listings produced by
.B ctcpost
are:
.RS 5
.TP
.B execution profile listing
full control structure skeleton of the source files with execution
counters and test effectiveness ratios
.TP
.B untested listing
only functions and control statements with insufficient test
coverage are listed; has the same format as the execution profile listing
.TP
.B timing listing
cumulative, average and maximum time spent in each timing instrumented
function; function call counters
.TP
.B xml output file
this output option contains the execution profile listing and timing
listing information in XML format
.TP
.B contents of symbolfile/datafile listing
what instrumented modules (source files) the given symbolfile(s)
and/or datafile(s) contain
.RE

The files needed to produce a listing are the
.IR symbolfile(s) ,
produced when the corresponding source code was instrumented by
.BR ctc ,
and the
.IR datafile(s) ,
saved when the instrumented program was executed.

.SH OPTIONS
.TP
.BI -p " reportfile"
Writes an execution profile listing. If the reportfile given
is  "-" or "stdout", the listing is written to stdout.
.TP
.BI -u " reportfile"
Writes an untested listing. If the reportfile given
is "-" or "stdout", the listing is written to stdout.
.TP
.BI -t " reportfile"
Writes a timing listing. If the reportfile given
is "-" or "stdout", the listing is written to stdout.
.TP
.BI -x " reportfile"
Writes an xml output file. If the reportfile given
is "-" or "stdout", the listing is written to stdout.
.TP
.B -ff
.RS
Forces function coverage to be used in the listings even if the
source file is instrumented with decision or multicondition coverage.
.RE
.TP
.B -fd
.RS
Forces decision coverage to be used in the listings even if the
source file is instrumented with multicondition	coverage.
.RE
.TP
.B -fc
.RS
Forces condition coverage to be used in the listings even if the
source file is instrumented with multicondition  coverage.
.RE
.TP
.B -fmcdc
.RS
Forces MC/DC coverage to be used in the listings even if the
source file is instrumented with multicondition coverage.
.RE
.TP
.B -nhe
.RS
(no header extract) If header code is instrumented (normally not)
the header files are not extracted from the code files they are
included, but reported as part of the code file. By default, when
this option is not given, the header files are extracted and reported
as their own file entities, and the coverage percentages are
recalculated correspondingly.
.RE
.TP
.BI -w " listing-width"
Reduces the maximum width of the listings. The default width
is 4096 characters.
.TP
.BI -a " target-datafile"
All the datafiles specified in the command line are combined
and written to target-datafile.	All modules (source files) from
the input datafiles are included unless option -f and/or -nf is used.

If two or more input datafiles contain counter data blocks of
the same module (source file), their counter data blocks are
added and only one counter data block of the module is written
to target-datafile.

If two or more input datafiles contain counter data blocks of
the same module (source file), but they have different instrumentation
timestamps, only the counter data blocks representing the most recent
instrumentation will be added and written to target-datafile.

If target-datafile already exists, it is overwritten.
.TP
.BI -a " target-symbolfile"
All the symbolfiles specified in the command line are combined
and written to target-symbolfile. All source files from the input
symbolfiles are included unless option -f and/or -nf is used.

If two or more input symbolfiles contain descriptions of the same
source file, only the description having the newest instrumentation
timestamp is written to target-symbolfile.

If target-symbolfile already exists, it	is overwritten.
.TP
.B -l
.RS
Produces a listing of the source files and their instrumentation
timestamps from the symbolfile(s) and datafile(s).
.RE
.TP
.B -L
.RS
Like -l option but additionally, for debugging purposes,
displays certain size and rewrite/update information of
the instrumented files.
.RE
.TP
.B -h
.RS
Displays a short command-line help.
.RE
.TP
.B -V
.RS
Displays what configuration files were loaded.
.RE
.TP
.BI @ optionsfile
Specifies a file which contains additions to the command line
of ctcpost. Newlines in the file are taken as spaces. Double
quotes can be used to preserve spaces within an option defined
in the options file.
.PP
.B -c
.IR conf-file [; conf-file ]...]
.RS 7
Specifies additional configuration file(s), which are searched
after all other places for configuration files have been looked
through. The configuration files are searched from the following
places in order:

.PD 0
.IP 1. 3
file
.I /usr/local/lib/ctc/ctc.ini
.IP 2. 3
file
.I $HOME/lib/ctc/ctc.ini
.IP 3. 3
file
.I $CTCHOME/ctc.ini
.IP 4. 3
file
.I $HOME/.ctc.ini
.IP 5. 3
file(s) specified by the environment variable
.B CTCINIT
(multiple files separated by a semicolon)
.IP 6. 3
file
.I ./.ctc.ini
.IP 7. 3
file(s) specified by this option
.PD
.PP
Parameters in a later file override parameters in an earlier file.
.RE
.PP
.B -C
.IR conf-param {=value|+value|-value}
.RS
Overrides (=) the value of a configuration parameter or adds (+)
or removes (-) a string to the value. If the parameter is a list of values, an
implicit list separator	(,) is inserted before the added value.
In case of '=', parameter values specified in the command line
override values specified in configuration files. Moreover, in
case of '=', parameter values specified later in the command line
override the ones specified earlier.
.RE
.TP
.BI -f " source-file"
Constraints the output to the selected source file(s) only. There can
be many -f options and one -f option can have many arguments as ';'
separated (their union is meant). Argument can have a '*'-wildcard.
.TP
.BI -nf " source-file"
After applying the possible -f options further constraints the output
to NOT contain the selected source file(s). Similar multiple argument
and wildcard support as in -f option. In -nf option you can specify
also header files (that are extracted from the primary code files).

.SH FILES
.PD 0
.TP 20
.I /usr/local/bin/ctcpost
CTC++ postprocessor
.TP
.I /usr/local/lib/ctc/ctc.ini
default configuration file
.TP
.I $HOME/lib/ctc/ctc.ini
default local configuration file
.TP
.I $CTCHOME/ctc.ini
alternate configuration file
.TP
.I $HOME/.ctc.ini
user's local configuration file
.TP
.I ./.ctc.ini
local configuration file
.PD

.SH ENVIRONMENT
.TP 20
.B CTCHOME
path for the CTC++ home directory; the configuration file
.I ctc.ini
is searched in this directory
.TP
.B CTCINIT
path(s) for optional/additional configuration file(s)

.SH VENDOR
Verifysoft Technology GmbH
.br
In der Spoeck 10, 77656 Offenburg, Germany
.br
URL: http://www.verifysoft.com

.SH SEE ALSO
.BR ctc (1),
.BR ctcwrap (1),
.BR ctcxmlmerge (1),
.BR ctc2dat (1),
.BR ctc2html (1),
.BR ctc2excel (1),
.br
.I CTC++ User's Guide
(ctcug.pdf)
