Testwell Oy                             CTC++ System Version 8.1
Verifysoft Technology GmbH
29 December 2016


This file describes the changes in successive versions of CTC++.
The latest version is described first.


Version 8.1  (29 December 2016)
-------------------------------

This revision 8.1 of CTC++ has the following version numbers in its
components:


This revision has the following version numbers in its components:

    Preprocessor               8.1   (was: 8.0.1; seen by -h option)
    Run-time libraries         8.1   (was: 8.0.1; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              8.1   (was: 8.0.1; seen by -h option
                                     and in the listings)
    Header file ctc.h          8.1   (was: 8.0.1; seen in the file)
    Configuration file ctc.ini 8.1   (was: 8.0.1; seen in the file)
    CTC++ to HTML Converter    5.3   (was: 5.2; seen by -h option)
    CTC++ to Excel Converter   3.3   (unchanged: seen by -h option)
    CTC++ XML Merger utility   3.2   (was: 3.1; seen by -h option)
    ctc2dat receiver utility   3.5   (was: 3.4; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio IDE Integration
                               4.2   (unchanged; seen by clicking the
                                     Tw-icon in the dialog program
                                     and selecting "About...")

    CTC++ Wrapper for Windows  3.5   (was: 3.4: seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.4   (unchanged; seen by -h option)


This CTC++ v8.1 version contains enhancements and bug fixes:

In the CTC++ preprocessor (ctc):

- Bug fix: Source line numbers were not counted correctly when certain
  kind of multiline templated input, e.g. 'Templname<smtg> \n obj;'.
  The coverage report (.txt and .html) had wrong line number mapping.
  This bug occurred only in CTC++ v8.0.1.

- Bug fix: In certain kind of nested template case, something like
  X< ... Y<...>>, the inner template class name Y was not recognized
  properly. Either the instrumented code did not compile or file end
  remained uninstrumented. This bug occurred only in CTC++ v8.0.1.

- Enhancement: When switching to an included file having instrumented
  code, which ctc sees in the form of a #line directive, now remembering
  also the line number where the switch started. The ctc2html phase
  later can now do more properly the coverage report HTML'ization.

- Change: If a code snippet is #included to a function, which is
  instrumented, also the code snippet is instrumented, regardless of
  the EXLUDE/NO_EXCLUDE/NO_INCLUDE ctc.ini settings.

- Change: The ctc.ini SOURCE_IDENTIFICATION setting default value is
  changed from "as_given" to "absolute". Now in later ctc2html phase the
  source files get found better without needing to give -s options.

- New/Change: Introduced setting SKIP_PARAMETER_LIST=identifierlist to
  ctc.ini. If such identifier is met followed by '(...)', nothing is
  instrumented inside the parentheses, notably if there would be
  ternary-?:, which must not be instrumented. Previous hard-coded
  support on identifier '__compile_time_assert' is removed. E.g.,
     SKIP_PARAMETER_LIST=__compile_time_assert,__builtin_object_size

- Enhancement: At Windows, in the ctc.ini setting COMMAND, the file
  extension '.exe' is no more necessary (but is still allowed). Now e.g.
     COMMAND = cl
  matches to 'cl', 'cl.exe', 'path\to\cl', 'path\to\cl.exe'.

- Change: No more recording into symbolfile the function parameter
  profile, function category, defined and declared (in file and at line)
  information. Later, in ctcpost phase in XML form report these ones are
  no more reported.

- Change: In the ctc.ini EMBED_FUNCTION_NAME setting it is no more
  accepted plain '*' wildcard argument. Triggering the coverage data
  write-out at every function end would not be wise anyway.

- New: Introduced environment variable CTC_COND_OPER_NO_INSTR. When it
  is set, ternary-?: decisions are not instrumented. Previously, and
  still, same effect was got by macro -DCTC_COND_OPER_NO_INSTR, but
  with it the counter locations are anyway allocated (always 0 hits),
  which lower the TER%.

- Bug fix: Better handling of gcc-specific 'asm volatile(...);',
  'asm goto(...);' and 'asm volatile goto(...);'. Previously, a ';'
  inside the parentheses could confuse ctc's parsing of the code.


In the CTC++ run-time library:

- Enhancement: More robust behavior, for avoiding certain problems,
  in a situation when two threads of an instrumented program trigger
  coverage data write-out at a same time. Now the later thread's
  write-out request is just silently ignored. The ongoing write-out
  takes care also of the later thread's need.


In the CTC++ postprocessor (ctcpost):

- Enhancement: The coverage report can now be restricted also by header
  files (new handling of -f and -nf options).

- Change: The format of line directive (in .txt and .xml form coverage
  reports) now has also the line number from what line at the first file
  the file switch was.

- Change: The coverage report (.txt and .xml form) bottom line summary
  no more has the "Measurement points : n" line.

- Change: The .xml form coverage report no more contains the following
  tags per each function: <parameters>, <category>, <declared_in_file>,
  <declared_at_line>, <defined_in_file>, <defined_at_line>.

- Bug fix: The XML form coverage report had wrong value in <lines> item
  in <file_summary> sections. The ctcxmlmerge step later now reports
  the line count correctly in its per files and overall summary.

- Bug fix: If a C++ try-function catch(...){...} blocks had #includes
  (brought instrumented code), the report writing failed. Now fixed.


In the Visual Studio IDE Integration:

- Enhancement:  The "basic integration engine" (vsCTC.exe) is unchanged,
  but for installation there is improved modify_msbuild_path.bat for
  better C# Framework64 support.


In the CTC++ Wrapper for Windows (ctcwrap):

- Enhancement: Technical changes how ctcagent.ex_ component passes
  information of ctc options, compile command and its arguments to
  ctc-instrumentation. The new arrangement avoids problems with very
  long commands.

- Enhancement: More robust ctcwrap.bat behavior when handling command
  like 'ctcwrap ... "path to\vcbuild" ... "arg with spaces" ...'.


In the CTC++ to HTML converter (ctc2html):

- Change: The utility accepts only v8.1 level (or later) input.

- Enhancement: The html'ized report is now more "accurate" in source
  file switches, thanks to the new line directive format in input.

- Change: Moved options -no-sources and -no-javascript to
  --enable-XXX=1/0 category of options.

- Bug fix: Now propely generating HTML of a source file having line
  number > 99999 (real big file or forged by #line directive)


In the CTC++ XML Merger utility:

- Change: The utility accepts only v8.1 level (or later) input.

- Bug fix: Now properly handling and accepting a response file command
  line argument, whose last line did not end to a newline. 


In the ctc2dat receiver utility:

- Enhancement: The utility gave "Internal error" message and gave up
  processing, if the input was "really bad" (seriously corrupted?).
  Now also in such cases it continues and tries to find a re-synck
  from next <START:... section, or until file end.


In the Host-Target add-on (HOTA):

- New: Upgraded the HOTA package from v5.2-->v5.3 (separate delivery
  package with its own version.txt etc.). Notably also the writing of
  MON.txt by parallel threads is handled more robustly, as in host
  run-time, which was a likely problem in some recent customer cases.


General:

- Change: The license check-out retrial (was used for some reasons
  before) count is lowered from 3 to 1. At Windows this means that
  Flexlm License Finder pop-up comes only 2 times (when FLEXLM_BATCH
  is not set), and needs to be canceled, in possible network problems.

- Compatibility: Best is to reinstrument the code base and generate
  the reports anew.

- CTC++ User's Guide upgraded to v8.1 level (ctcug.pdf).


Version 8.0.1  (28 June 2016)
-----------------------------

This revision 8.0.1 of CTC++ has the following version numbers in its
components:


This revision has the following version numbers in its components:

    Preprocessor               8.0.1 (was: 8.0; seen by -h option)
    Run-time libraries         8.0.1 (was: 8.0; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              8.0.1 (was: 8.0; seen by -h option
                                     and in the listings)
    Header file ctc.h          8.0.1 (was: 8.0; seen in the file)
    Configuration file ctc.ini 8.0.1 (was: 8.0; seen in the file)
    CTC++ to HTML Converter    5.2   (was: 5.1; seen by -h option)
    CTC++ to Excel Converter   3.3   (was: 3.2: seen by -h option)
    CTC++ XML Merger utility   3.1   (was: 3.0; seen by -h option)
    ctc2dat receiver utility   3.4   (was: 3.3; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio IDE Integration
                               4.2   (unchanged; seen by clicking the
                                     Tw-icon in the dialog program
                                     and selecting "About...")

    CTC++ Wrapper for Windows  3.4   (unchanged: seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.4   (unchanged; seen by -h option)



This revision 8.0.1 of CTC++ is primarily a bug fix version over
CTC++ 8.0, containing the following:


In the CTC++ preprocessor (ctc):

- Bug fix: Relational operator < was a problem to ctc in template
  instantiations and specialisations, and could in extreme cases cause
  unpredictable consequences, e.g.,
     template <bool b> class X { ... }; ... X< A<B > ...

- Bug fix: A lambda following immediately assignment operator '='
  was not instrumented, when instrumentation mode was multicondition
  coverage, e.g.,
     i = [](){ return 0; };

- Bug fix: A lambda in global scope was not instrumented, if it was
  assigned to a function pointer, e.g.,
     int& (*fpi)(int*) = [](auto* a) -> auto& { return *a; };

- Bug fix: A function or lambda was not instrumented, if there was
  '&&' (C++11) in its trailing return type, e.g,,
     []() -> int && {...}

- Bug fix: When in newer C++ it came allowed to write initialization
  without '=', e.g. 'int buf[100]{0};', ctc no more (erroneously)
  instruments the code like a lambda.

- Bug fix: In some connections, e.g. as a function parameter, ctc
  reported wrongly syntax error of a lambda function that had '[=]'
  capture when instrumentation mode was multicondition coverage, e.g.
     f( [=]()->int{ return 1; }() );

- New: Some new C++14 features are now properly handled:
  -- binary literals, e.g., 0b010100
  -- digit separator in numeric literals, e.g., 109'208'000
  -- 'auto' in a trailing return type and in a parameter list

- Bug fix: String literal like "AAAxBBB" where x was binary 1 was not
  parsed properly.

- Enhancement: Certain kind of inline assembly functions, supported by
  some compilers, are now handled (recognized, not instrumented, body
  lines kept unchanged) automatically. Such functions look like
     [_][_]asm[_][_] rtype fname(plist){assembly lines}
  Previously RUN_AFTER_CPP/RUN_AFTER_INSTR extra scripts were used to
  handle these cases.

- Enhancement: On primary host platforms (cl and gcc/g++ compilers)
  fine-tuned the default ctc.ini files to work more properly with some
  newly encountered option usages.

- Bug fix: A 'return expression;' statement was not instrumented
  correctly and resulted in a compilation error, if there was
  '#include "otherfile"' immediately after 'return', e.g.,
     return
     #include "otherfile"
     ;       

- Change/bug fix: Now, if ternary-? appears in a 'typedef ...;'
  construct, it is never instrumented. Instrumentation could cause
  a compile error with some compilers.

- Bug fix: Initializations having 'const' or 'constexpr' qualifier,
  e.g. 'const bool b = aa && bb;', are no longer instrumented. Compile
  error would occur if variable 'b' were later used in a place needing
  the 'const' or 'constexpr' property.

- Bug fix: If there was a 'friend' function in a class and the function
  had also a body, the function remained uninstrumented. Now it is
  instrumented. E.g.,
     class X { ... friend int fr1(...){...} ... };

- Bug fix: GCC's 'asm goto (...);' and 'asm volatile goto (...);'
  are now handled correctly. Previously, they were instrumented like
  normal goto statements (yielding non-compilable code).

- Enhancement: In the configuration parameter EMBED_FUNCTION_NAME,
  wildcard character(s) '*' are now allowed. E.g.,
     -C "EMBED_FUNCTION_NAME=*::close"


In the CTC++ run-time library:

- Change: In ctc.h, at Windows (when 'defined(_WIN32)') the default
  storage class specifier on the CTC++ run-time functions,
  ctc_register_module() etc., is now simply 'extern'. Was previously
  '__declspec(dllimport)'. Now default instrumentation of the code
  files and plain compile of the HOTA targ*.c files link smoothly.
  Previously there was problems e.g. with gcc. Should the HOTA-based
  runtime be a static/dynamic library and need special linker advice,
  there are means to introduce them when instrumenting the code and
  when compiling the HOTA targ*.c files.

- Change: At Linux platform started to use flock() system service to
  additionally ensure exclusiveness in datafile handling (was needed
  in some extreme situations).


In the CTC++ postprocessor (ctcpost):

- Bug fix: no more crash (in some cases) when two reporting options in
  the command e.g. -p and -u. (in future this may become denied...)

- Bug fix: E.g. the following 'if (c1 ? 1 : 0) {...' gave wrong
  statement coverage result, when c1 was evaluated but always to false.
  Silly code as such, but possible.

- Bug fix: When handling header file names, and if they contained
  duplicated directory separators \\ or // in some special cases.

- New: In .txt and .xml profile report there is new bottom line summary
  information "Functions : n". It tells how many instrumented functions
  there are in the reported files altogether. In .xml report, the
  number of functions is additionally reported per each file.


In the Visual Studio IDE Integration:

- Bug fix: The "basic integration engine" (vsCTC.exe) is unchanged,
  but at installation time there is improved modify_msbuild_path.bat,
  which enables C# instrumentation in Visual Studio 2013 and later.


In the CTC++ Wrapper for Windows (ctcwrap):

- Documentation fix: The previous v8.0 version.txt said ctcwrap still
  be subversion v3.3, while it was already subversion v3.4.


In CTC++ to HTML converter (ctc2html):

- New: Advanced option --enable-statement_coverage=0/1 added. With it
  statement coverage information can be dropped off from the HTML
  report (becomes simpler, has less "eye-stoppers").

- Enhancement: New heuristic to conclude if a function internal
  conditional code block (#if...#elif...#else...#endif) is in the
  build or not, and determine the line coverage background color
  accordingly. Now if such block has no counters, it is assumed not
  to be in the build (grey letters on white background in the HTML).
  Otherwise the block is painted on the line coverage color (green/red)
  as concluded by the function execution flow analysis. This heuristic
  is not 100% correct, but more correct than before.

- Bug fix: A used -s option now shows properly in the HTML report at
  various directory fields. Example: Assume a file has been instrumented
  so that it is known in Execution Profile Listing as '..\Dir\file.c'.
  Then, ctc2html is run in a directory where that name does not resolve.
  Assume the file really resides at 'F:\Work\Dir\file.c' and with option
  '-s F:\Work\Dir' ctc2html can find the file (and html'ize it). Now in
  the HTML report the file's directory is 'F:\Work\Dir', was '..\Dir'.

- Bug fix: When in a string literal there was something looking like a
  comment start, or the other way round.

- Changes/Bug fixes: Fine-tunings or small corrections how the line
  coverage background color gets determined in various special cases.


In the CTC++ XML Merger utility:

- Enhancement: ctcxmlmerge is now made much faster.

- Change: The report now shows correctly copyright year (reflecting
  when the ctcxmlmerge utility was made), no more the copyright year
  of the first input XML report (reflecting the year when the used
  ctcpost utility was made).


In the CTC++ to Excel Converter (ctc2excel):

- Enhancement: Now properly handling input Execution Profile Listings
  that are generated by ctcpost v8.0.1 (having the number of functions
  at the bottom summary).


General:

- CTC++ User's Guide upgraded to v8.0.1 level (ctcug.pdf).

- The 'stack' example changed so that it no more uses uninitialized
  variables. Some debuggers noticed it and stopped example running.


Version 8.0  (27 November 2015)
-------------------------------

Since the previous "all platforms version" v7.3.1 there has been
released a v7.3.3 (May 2015) version on Windows. It was a kind of test
version on some new features. But those features grew and matured, and
as result it came new major version CTC++ v8.0.

This version.txt explains the changes v7.3.1 --> v8.0. If you already
have had a CTC++ v7.3.3/Windows, it already had some of the new features.


This revision has the following version numbers in its components:

    Preprocessor               8.0   (was: 7.3.1; seen by -h option)
    Run-time libraries         8.0   (was: 7.3; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              8.0   (was: 7.3; seen by -h option
                                     and in the listings)
    Header file ctc.h          8.0   (was 7.3; seen in the file)
    Configuration file ctc.ini 8.0   (was: 7.3[.1]; seen in the file)
    CTC++ to HTML Converter    5.1   (was: 4.1; seen by -h option)
    CTC++ to Excel Converter   3.2   (was: 3.0; seen by -h option)
    CTC++ XML Merger utility   3.0   (was: 2.2; seen by -h option)
    ctc2dat receiver utility   3.3   (was: 3.2; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio IDE Integration
                               4.2   (unchanged; seen by clicking the
                                     Tw-icon in the dialog program
                                     and selecting "About...")

    CTC++ Wrapper for Windows  3.3   (was: 3.2; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.4   (unchanged; seen by -h option)



This CTC++ v8.0 version contains enhancements and bug fixes:

In the CTC++ preprocessor (ctc):

- New: Introduced configuration parameter WARNING_LEVEL with possible
  values none (like -no-warnings option), warn (normal warnings),
  info (some new warnings of tool limitations).

- New: introduced #pragma CTC ANNOTATION annotation_text. The
  annotation_text comes visible to CTC++ reports (.txt, .xml, .html).

- Bug fix: When "CTC SKIP"; ... "CTC ENDSKIP"; is used to skip (not to
  instrument) code in a function, the starting "CTC SKIP"; is no more
  counted to a statement.

- Enhancement: On primary host platforms fine-tuned the default ctc.ini
  files to work more properly with some rarely used compiler options.

- Enhancement: For newer Borland compiler versions, taught ctc.exe to
  work properly with so called BOM marker, which the compiler can
  internally generate to a C-preprocessed file.

- New: Introduced new 'ASSEMBLY_COMMENT_CHARS=chars' configuration
  parameter. Helps in handling new kind of assembly dialects, e.g. where
  ';' does not start (assembly-)comment.

- Change: If there is 'const' in a function, e.g. in context
     const int xsize = X > Y ? 10 : 20;
  the decision in the ternary is no more instrumented. If it were
  instrumented, possible later use of xsize in an array declaration would
  cause a compilation error.

- Bug fix: Declaration in condition starting with 'constexpr' (C++11) was
  instrumented incorrectly resulting in a compilation error. For example,
     if (constexpr T t = f()) ...
  (also in while and for). Now it is instrumented like other declarations
  in a condition.

- Bug fix: Under some circumstances, deriving the datafile name from
  symbolfile name was erroneous. E.g., if the symbolfile name was
  "D:\symbols\MON.sym", its datafile name came "D:\datbols\MON.dat".
  Now it comes correctly "D:\symbols\MON.dat".

- Bug fix: In some (build system generated) response files there could
  occur the following kind of file names "dir1\dir2"\file.xxx. Of these
  ctc.exe erroneously parsed dir1\dir2\ file.xxx. Now they are parsed
  to dir1\dir2\file.xxx or to "dir1\dir2\file.xxx", if there is real
  reason to use "...".

- New/Enhancement: When C code, functions with old-style (K&R1) parameter
  declarations are now instrumented. For example:
     int foo()
        int i;
     {...function body;}
  Previously this type of K&R1 code was forbidden, not instrumented, and
  sometimes could cause nondeterministic behavior.

- Bug fix: Some extreme case "..." safequarding in the ctc-generated
  temporary file names (e.g. if they needed to be created to a directory
  with space in the path).

- Bug fix: In Unixes, some extreme case corrections in handling adjacent
  '\' and ''' and '\'' characters on the command line for preserving the
  intended value in ctc-constructed intermediate commands. E.g. in
     -DMACRO=\'\\\'xxx\\\'\', -DMACRO=\'xyz\\\'

In step v7.3.3 --> v8.0:

- Bug fix: In a C++11 template use, something like 'using NewName =
  OldName<...>;' and when later seeing '...NewName<...>...', ctc parsed
  the code erroneously, with various error consequences.

- Change: Now each 'asm' (and its various synonyms) are counted as one
  statement, like a ';'. Now e.g. a function with only inline asm lines
  no more gets zero statement count.

- Change: If a compound statement or a function body contains only
  #-starting line(s), it is counted to one statement, like an empty {}.

- Bug fix: The following kind of function definitions
  'TT (fname) (parlist) {body}' were not processed right (before v7.3.3
  not instrumented, in v7.3.3 wrong function name). When the return type
  was a simple predefined type like 'int' or when the function name was
  not in parenthesis, there was no problem.

- Bug fix: A template class or function that had a template parameter,
  something like 'template<template <class> A = B> class C {...}', was
  parsed erroneously causing varying consequences.


In the CTC++ run-time library:

- Functionality unchanged, but assumes a v8.0 compliant ctc.ini file.


In the CTC++ postprocessor (ctcpost):

- New: For helping the ctc2html utility to generate HTML report with
  line coverage information, some new information is added to textual
  execution profile report. They are (and have meaning):
  -- each if/for/while/do/switch/try statement block ending-} (either
     when there is or is not explicit '}' in user's code) show as
     "}+" (code after } was entered) or "}-" (code after } was not
     entered) line.
  -- labels show now as "L:" (L was "flown to", and possibly also
     "gotoed") or "L:+" (L was not "flown to" but it was "gotoed") line.
  -- case labels show now as "case n:" (this case was explicitly
     "jumped to") or "case n:+" (this case was not explicitly "jumped
     to" but it was anyway "flown to").
  -- "default:" or "default:+" lines (same logic as in "case n:[+]").
  Same information is produced to XML form report. These additional
  +/- markings are not added, if statement coverage is not available
  on the function.

- New: Annotation concept introduced for commenting. In the user's code
  there can be line "#pragma CTC ANNOTATION text", where the "text"
  shows in the generated report (and later in the HTML report).

- Enhancement: Made the utility more robust against some crashes (they
  could occur in some pathological cases, if only parts of a function
  were instrumented and real control structure was not known).

- Change: In statement coverage flow analysis, if previous probe was
  hit, and statement list following it was started, and next probe is
  not hit (e.g. due to exception occurred or control remained in some
  called code), all statements upto next probe are counted to hit
  statements. Previously they were excluded from hit statements.
  
In step v7.3.3 --> v8.0:

- Change: Header files (when instrumented, contain complete functions)
  are now extracted from their code files, coverage hits summed up (if
  many similar), and reported as separate MONITORED HEADER FILE item.
  (Option -nhe, no header extract, keeps the old behavior)

- Bug fix: In XML form report the const-if() and similar decisions were
  reported as if the decision had always been true. But it could have
  been also false.

- Change: "Statement coverage not available" shows now at textual
  profile listing and in HTML:
  -- function level: "N.A.", previously "100% (0 / 0)"
  -- file level: TER% is calculated of those function from which it
     was available and remark "(N.A. for n functions)", previously no
     remark that statement coverage of some functions was not available
  -- overall summary level: like file level
  (Similar changes in XML report)


In the CTC++ Wrapper for Windows (ctcwrap):

- Bug fix: "ctcwrap -hard ..." now works also if the specified compiler
  is given with path that contains spaces.

- Enhancement: In "ctcwrap -hard ..." use the machinery now works better
  if CTCHOME is not set or it is not in PATH.

- Change: Some new sanity checks on command line arguments and clarified
  error messages.


In CTC++ to HTML converter (ctc2html):

- New: In the HTML form report introduced 'line coverage'. It shows
  as color-coded lines what code lines were/were not executed.

- Change: Greatly rearchitectured and improved the look-and-feel of
  the HTML report, notably the source code mapped Execution Profile
  HTML page. It has structural coverage counters as before, but the
  color-coding is redesigned and there is new line coverage
  color-coding on the source code lines.

- New: Introduced (to advanced users) capability to modify the used
  style sheet for fine-tuning used colors and other graphical details
  in the generated HTML pages.

- New: Some new --enable-XXX=... options added.

- New: --enable-XXX=0/1 options can alternatively be given as
  --disable-XXX/--enable-XXX on command-line.

- Change: Syntax-highlighted presentation is now default in displaying
  the source code (with option to disable it).

In step v7.3.3 --> v8.0:

- New: Identifying simple #if 0 ... #endif sections and in line coverage
  color painting showing the lines in grey (indicating disabled code)


In the CTC++ XML Merger utility:

- Change: Adapted to the new ctcpost v8.0 generated .xml reports.

- Change: When inside a function there is an #include, which brings code
  (that was also instrumented), the #included file is no more pulled out
  to a separate MONITORED HEADER FILE element in the report. Instead the
  #included code is reported as part of its includer function.

In step v7.3.3 --> v8.0:

- Change: Statement coverage on functions is recalculated if the merged
  functions are similar (has same code). File and summary levels
  correspondingly.


In the CTC++ to Excel Converter (ctc2excel):

- Bug fix: corrected a bug in lines having FILE OVERALL column. All
  columns after this were shifted to the left, and FILE word was lost.

In step v7.3.3 --> v8.0:

- Change: Option -efs argument can now be given also as "c" or as plain
  c. Previously it had to be 'c' (char ' in some keyboards is difficult).


General:

- The v7.x level symbolfile and datafile is not compatible to CTC++ v8.
  The code needs to be reinstrumented and tests rerun for getting v8
  level coverage report.

- CTC++ User's Guide upgraded to v8.0 level (ctcug.pdf).


Version 7.3.1  (7 October 2014)
-------------------------------

This revision 7.3.1 of CTC++ has the following version numbers in its
components:

    Preprocessor               7.3.1 (was: 7.3; seen by -h option)
    Run-time libraries         7.3 (unchanged; seen by 'ident'
                                   command applied on the library
                                   in some environments)
    Postprocessor              7.3 (unchanged; seen by -h option
                                   and in the listings)
    Header file ctc.h          7.3 (unchanged; seen in the file)
    Configuration file ctc.ini 7.3 (unchanged; seen in the file)
    CTC++ to HTML Converter    4.1 (was: 4.0; seen by -h option)
    CTC++ to Excel Converter   3.0 (unchanged; seen by -h option)
    CTC++ XML Merger utility   2.2 (was: 2.1; seen by -h option)
    ctc2dat receiver utility   3.2 (unchanged; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio IDE Integration
                               4.2 (unchanged; seen by clicking the
                                   Tw-icon in the dialog program
                                   and selecting "About...")

    CTC++ Wrapper for Windows  3.2 (unchanged; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.4 (unchanged; seen by -h option)


This CTC++ v7.3.1 version contains enhancements and bug fixes:

In the CTC++ preprocessor (ctc):

- Bug fix: In v7.3 came enhancement that assignment statements of form
  "variable = boolean_expression;" is instrumented for multicondition
  coverage, if it has &&, || operators. We had false assumption that
  the construct would always end to ';', and if not, ctc gave its own
  syntax error. Such assignments can however occur also in contexts
  like "(v = ...);", "c ? (v1 = ...) : (v2 = ...)", "arr[i = ...]",
  "foo(p1, p2 = ...)". Now corrected.

- Bug fix: If instrumentation was for multicondition coverage (-i m)
  and there was code like
     if (condition)
        variable = expression;  // not {...} around the then-part!
     code continues...          // e.g. else if (...) ...
  There was a bug in parsing the 'expression' for instrumentation of
  its possible && and || operators. The bug was normally harmless, or
  the instrumented code did not compile, or remaining function code was
  not instrumented properly. However, if 'condition' was of type
  "declaration in condition", the instrumented code could in some cases
  behave differently than original (unless compile error before it).
  Now corrected.

- Bug fix: A C++ construct (declaration in condition, with **), like
     if (Type ** variable = something) {...
  is now instrumented correctly. Previously compilation error.

- Enhancement (workaround on Windows/VC++ limitation): VC++ (cl, link)
  has limitation that a line in response file cannot be longer than
  ~131.000 characters. Now ctc splits its generated long response files
  to contain max 100.000 characters on a line. No more needed certain
  other abnormal ctc-workaround here.


In CTC++ to HTML converter (ctc2html):

- New: Added option --enable-syntax_highlight=0/1. When activated the
  generated HTML pages on source code get somewhat similar appearance
  as in commonly used syntax editors (Visual Studio editor coloring
  style was used as model).

- New: Now in the delivery package there is a ready-made ctc2html.ini
  file. Thinking is that for a user it would be easier to modify it for
  changing the utility's default behavior in various graphical aspects.


In the CTC++ XML Merger utility:

- New: Added new option "-x summary.xml". The output file is a compact
  XML summary of the merged report, and has only TER information of the
  functions/files/overall. Notably, now also the extracted header file
  TER results can be further processed from XML form.

- Change: The "-o profilefile" option was changed to "-p profilefile".
  It is now similar as ctcpost's -p.

- Change: Into error messages added "(i/j)" portion, e.g.
     *** ctcxmlmerge error 5 (1/285): Unknown option: -rubbish
  It is for vendor internal use, helping in technical support.

- Bug fix: The re-calculated structural TER% was wrong (too low) in a
  situation, if there was MC/DC analysis line like the following:
     -   lno     MC/DC (cond n): i + j, k - l
  Here ctcxmlmerge erroneously considered that (cond n) would not have
  met the MC/DC criteria, but which actually was met. Now no more
  '-' verdict and no penalty to TER%.


General:

- CTC++ User's Guide upgraded to v7.3.1 level (ctcug.pdf).


Version 7.3  (15 August 2014)
-----------------------------

This revision 7.3 of CTC++ has the following version numbers in its
components:

    Preprocessor               7.3 (was: 7.2; seen by -h option)
    Run-time libraries         7.3 (was: 7.2; seen by 'ident'
                                   command applied on the library
                                   in some environments)
    Postprocessor              7.3 (was: 7.2; seen by -h option
                                   and in the listings)
    Header file ctc.h          7.3 (was: 7.2; seen in the file)
    Configuration file ctc.ini 7.3 (was: 7.2 seen in the file)
    CTC++ to HTML Converter    4.0 (was: 3.5; seen by -h option)
    CTC++ to Excel Converter   3.0 (unchanged; seen by -h option)
    CTC++ XML Merger utility   2.1 (was: 2.0; seen by -h option)
    ctc2dat receiver utility   3.2 (unchanged; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio IDE Integration
                               4.2 (unchanged; seen by clicking the
                                   Tw-icon in the dialog program
                                   and selecting "About...")

    CTC++ Wrapper for Windows  3.2 (was: 3.1; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.4 (unchanged; seen by -h option)


This CTC++ v7.3 version contains enhancements and bug fixes:

In the CTC++ preprocessor (ctc):

- Enhancement: Extending the multicondition instrumentation (-i m) to
  apply also to assignment statements in function bodies, if there are
  operators && or || in the expression. For example:
     v = a > 5 && b <= 6 || c;

- Bug fix: Under certain (very special) conditions, with mixed use of
  C++ template instantiation and ternary-?:, CTC++ lost a space between
  ':' and '::', yielding ':::', which did not compile. For example:
     T< ... ( ... ? ... : ::X::Y ... ) ... >

- Change: The ctc.ini setting SOURCE_IDENTIFICATION=... is now honored
  in all generations of file names. Previously, some file names could
  remain in the form as the C-preprocessor had determined them. The net
  result is that now the ctcxmlmerge utility works better.

- Enhancement: Made the ctc.ini handling more robust; specifically
  against a user error that option(s) in OPT_COMP_OUT were not properly
  introduced in PARAMS or PARAMS_SEPARATE. (A crash could occur.)

- New: Introduced '#pragma CTC TESTCASE testcasename' as an alternate
  way for the explicit ctc_set_testcase("testcasename") call.

- New: Now properly handling (not instrumenting as a function) the
  Visual C++ extensions '__if[_not]_exists(identifier) {code_lines}'.


In the CTC++ run-time library:

- Functionality unchanged, but assumes a v7.3 compliant ctc.ini file.


In the CTC++ postprocessor (ctcpost):

- New: In the XML report, in the <file_summary>...</file_summary>
  element, added the number of lines and number of measurement points
  per that source file.


In the CTC++ Wrapper for Windows (ctcwrap):

- Change: The verbose outputs of "ctcwrap -hard ..." are now prefixed
  with "ctcwrap: ..." for more clearly seeing who wrote what.

- Change: Dropped-off the old Symbian-specific build specialties.


In CTC++ to HTML converter (ctc2html):

- New: Introduced ctc2html.ini file. It can be used to set your
  favorite values of the advanced --enable-XXX=value options. They
  affect some graphical properties of the generated HTML.

- Enhancement: For the statement coverage TER% at summary HTML pages
  there is now similar graphical histogram as there was already for the
  structural coverage TER%. You can set the threshold for the statement
  coverage TER percent in the ctc2html.ini file or by a command-line
  option, e.g. --enable-stmtthreshold=85.

- New: In the detailed Execution Profile page, at the end brace of each
  function, added the function TER percentages in a tooltip.

- Change: Simplified, made more peaceful, the color usage in the HTML
  pages.

- Change: Removed the deprecated option '-p prefix'. Instead, use the
  option '-o outputdir'.


In the CTC++ XML Merger utility:

- Enhancement: The options -f these_files and -nf not_these_files apply
  now also on the #included header files. Previously, they applied only
  on the primary code files.

- Bug fix: Actually thanks to the CTC++ Preprocessor change where the
  SOURCE_IDENTIFICATION=... is honored more pedantically, the bug
  vanished where a file could appear with different directory names
  in the merged coverage report under certain circumstances.

- Bug fix: When in multicondition instrumentation there were many
  variants of "if()" (or similar, i.e. like "if (a==1 && b==5)" and
  "if (a==1 && b==6)"), now the similar looking evaluation alternatives
  ("T && T" etc) are summed up, displayed and TER-calculated
  individually per each different decision.


In the ctc2dat receiver utility:

- Functionality unchanged, but as the new CTC++ run-time library is
  linked to the utility, assumes a v7.3 compliant ctc.ini file.


General:

- CTC++ User's Guide upgraded to v7.3 level (ctcug.pdf).


Version 7.2  (13 March 2014)
----------------------------

This revision 7.2 of CTC++ has the following version numbers in its
components:

    Preprocessor               7.2 (was 7.1.2; seen by -h option)
    Run-time libraries         7.2 (was 7.1; seen by 'ident'
                                   command applied on the library
                                   in some environments)
    Postprocessor              7.2 (was: 7.1.1; seen by -h option
                                   and in the listings)
    Header file ctc.h          7.2 (was: 7.1; seen in the file)
    Configuration file ctc.ini 7.2 (was: 7.1; seen in the file)
    CTC++ to HTML Converter    3.5 (was: 3.4; seen by -h option)
    CTC++ to Excel Converter   3.0 (was: 2.0; seen by -h option)
    CTC++ XML Merger utility   2.0 (new; seen by -h option)
    ctc2dat receiver utility   3.2 (was: 3.1; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio IDE Integration
                               4.2 (was: 4.1; seen by clicking the
                                   Tw-icon in the dialog program and
                                   selecting "About...")

    CTC++ Wrapper for Windows  3.1 (was: 3.0; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.4 (was: 1.3; seen by -h option)


This CTC++ v7.2 version contains enhancements and bug fixes:

In the CTC++ preprocessor (ctc):

- New: New configuration parameter OPT_NO_OPTFILE. Its argument is a
  list of compiler/linker options which should not be moved to a ctc-
  generated response file (if one needs to be generated), but be left
  on the generated command line. (Some compilers and linkers do not
  recognize certain options, if they reside in a response file.)

- Change: Speed-up when instrumenting files, which can be processed
  in less than one second. No more the one second delay, which was
  introduced in v6.5.5 for avoiding duplicate timestamps. Now the
  problematic situation (as it was at the time) is handled otherwise.

- Enhancement: Inline member functions in nameless classes, structs and
  unions are now instrumented (previously they were not), e.g.

     class {...int f() {...}...} x;
     typedef struct {...void memb() {...}...} S;

  The names of such functions are shown now in the listings as follows

     <unnamed-type>::f()
     <unnamed-type>::memb()

- New: Removing values from a list type configuration parameter setting
  is now possible by the '-' marking. For example

     OPT_ADD_COMPILE-/DCTC_HEAP_COUNTERS,/DCTC_CLIKE_MCOND

- Bug fix: When a string literal was immediately followed by a prefixed
  string literal, e.g. L"abc"L"def", this was broken by ctc (yielding
  non-compilable code).

- Bug fix: A ternary-?: preceded by a C++11 lambda with a throw
  specification was instrumented incorrectly. E.g.,
     [...] (...) throw(...) {...} () ? x : y
  Previously non-compilable code.

- Bug fix: The declarator ^, a VC++ (C++/CLI) extension, was handled
  erroneously in the following two cases:
  -- If ^ occurred in a declaration in condition. e.g.,
     'if (T^ t = ...) ...', the instrumented code did not compile.
  -- If ^ occurred in a trailing return type (C++11), e.g.,
     'auto f() -> String^ { ... }', the function (or lambda) was not
     instrumented.

- Change: When a datafile name is given in the DATAFILE configuration
  parameter, the extension ".dat" is added, if not given explicitly.
  (This is now consistent with adding the ".sym" extension to a
  symbolfile name. Note also that ctcpost accepts only such datafiles
  of which extension is ".dat".)

- Bug fix: ctc crashed in a situation when there were no ctc options
  specified on the command line and an intermediate RUN_BEFORE_ALL
  instrumentation script was called and it passed at least one option
  back to ctc.

- New: When C# code, statement lambdas, '(...)=>{...}' are now
  instrumented in the same way as C++11 lambdas.

- New: When C# code, accessors "get", "set", "add", and "remove",
  e.g. get {...}, are now instrumented like functions.

- Bug fix: When C# code, a ternary-?: preceded by the lambda operator
  '=>' was instrumented incorrectly. E.g., ... => i ? j : k ...
  Previously non-compilable code.


In the CTC++ run-time library:

- New: Introduced a test case concept. Coverage data can be collected,
  and later reported by ctcpost, per user-defined test cases. No
  changes to current "test case free" usage conventions.


In the CTC++ postprocessor (ctcpost):

- New: Information line of the number of verbose notices (e.g. if
  some coverage data was discarded), if any given, is now shown in the
  (profile, untested, timing) listing headers. This helps in support
  cases. (As before, the notices themselves are written to stderr.)

- New: Comment lines in response files are now supported. The comment
  character is '#' in column 1.

- Change: Option -V (upper-case V) used alone (or together with one
  or more -c options) shows now also the ctcpost version information.

- Change: Removed "SOURCE" from the file-TER line in profile reports
     ***TER   0 % (  0/  6) of SOURCE FILE file.cpp  (was before)
     ***TER   0 % (  0/  6) of FILE file.cpp         (is now)

- Enhancement: Made ctcpost more robust against some rare conditions
  (that could come up e.g. when instrumenting without C-preprocessing,
  although basically "unsupported", and in some weird use of
  #includes), which caused ctcpost to crash.

- New: Added some new elements to the XML report, in #include handling,
  primarily for the needs of the new ctcxmlmerge utility.

- Bug fix: In XML reports, function end-brace location is now reported
  consistently in situations when the file was instrumented for function
  coverage and when the file was instrumented for higher coverage but
  reported in function coverage view.

- Bug fix: When Java code, statement coverage was calculated wrong
  in 'break label;' under certain conditions.


In Host-Target add-on (HOTA):

- Enhancement: Upgrade v5.0 --> v5.1 released along with this basic
  CTC++ v7.2. Essentially only the test case support is added. The
  HOTA v5.0 users need not upgrade to the new v5.1 version unless the
  new test case features are used. The HOTA is a separate delivery
  package and it has its own version.txt.


In the ctc2dat utility:

- New: When reading text encoded counter values, and if the target
  has been a 64 bit machine, and if a value would come over 32 bit,
  max 32 bit value is used. Previously wrap-around happened. Note:
  when summing up the value to the datafile, the value remains at max
  32 bit, if the value would become bigger (unchanged behavior).


In the CTC++ Wrapper for Windows (ctcwrap):

- Bug fix: In "ctcwrap -hard ..." use corrected behavior if compiler/
  linker name was given with different casing as it actually was in
  the file system.

- Change: Some technical rearrangements in preparation to future needs.


In the CTC++ Wrapper for Unix (ctcwrap):

- Change: The ctc options that are in a possible user-defined CTCOPTS
  environment variable are now noticed, too, to the addition of the
  ctc options that are given at the ctcwrap command itself.


In CTC++ to HTML converter (ctc2html):

- Enhancement: The tool accepts now also ctcxmlmerge generated profile
  listings.

- New: Added to advanced --enable-XXX options means to set threshold%
  on statement coverage TER% warnings (displayed in red color if under
  threshold%), e.g. --enable-stmtthreshold=100.


In Visual Studio IDE integration:

- New and changes: E.g. Visual Studio 2013 IDE integration support.
  Read more from the version.txt from %CTCHOME%\Vs_integ\version.txt


In the CTC++ to Excel Converter utility:

- New: Added option -u (untested, for displaying only not fully-tested
  functions) and option -efs 'c' (excel field separator, for specifying
  the used excel field separator as wanted)

- Enhancement: Accepts now also ctcxmlmerge generated inputs.


In the CTC++ XML Merger utility:

- New: This utility, ctcxmlmerge v2.0, is introduced. It reads one or
  more XML form coverage reports, merges them and writes out a textual
  Execution Profile Listing. Instrumented header files are reported as
  separate files. This utility replaces the previous ctcmerge utility.
  This utility is now available on Windows, Linux and Solaris host
  platforms, but not on HPUX.


General:

- CTC++ User's Guide upgraded to v7.2 level (ctcug.pdf).

- Change: On Windows platform removed installation variants Server and
  Workstation installation. Full Installation variant remains.

- Change: The Flexlm license control behavior is changed so that
  after a successful license check-out the working connection is not
  recorded into registry (at Windows) or to file ~/.flexlmrc. Thus, in
  subsequent license check-outs the connection is established in the
  same way as in the first time, i.e. normally based on the environment
  variable LM_LICENSE_FILE or based on the FLEXLM_LICENSE_FILE setting
  in the CTC++ configuration file ctc.ini.


Version 7.1.2  (13 May 2013)
----------------------------

This revision 7.1.2 of CTC++ has the following version numbers in its
components:

    Preprocessor               7.1.2 (was 7.1.1; seen by -h option)
    Run-time libraries         7.1   (unchanged; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              7.1.1 (unchanged; seen by -h option
                                     and in the listings)
    Header file ctc.h          7.1   (unchanged; seen in the file)
    Configuration file ctc.ini 7.1   (unchanged; seen in the file)
    CTC++ to HTML Converter    3.4   (was 3.3; seen by -h option)
    CTC++ to Excel Converter   2.0   (unchanged; seen by -h option)
    CTC++ Merger utility       2.0   (unchanged; seen by -H option
                                     and in the merged listings)
    ctc2dat receiver utility   3.1   (unchanged; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio IDE Integration
                               4.1   (unchanged; seen by clicking the
                                     Tw-icon in the dialog program and
                                     selecting "About...")

    CTC++ Wrapper for Windows  3.0   (unchanged; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.3   (unchanged; seen by -h option)


This CTC++ v7.1.2 version contains enhancements and bug fixes:

In the CTC++ preprocessor (ctc):

- Bug fix: If '&' occurred in a declaration in condition, e.g.,
  'if (aCls &ref = ...) {...', the condition was instrumented
  incorrectly and did not compile. Now corrected.

- Bug fix: If the expression in a 'return' statement (as well as
  certain other statements, e.g., 'switch') contained something like
  'return FuncArr[5](6);', this could cause various symptoms, e.g.,
  CTC++ might report a syntax error. Now corrected. (Occurred only
  in v7.1 and v7.1.1).

- Bug fix: In a combination where 'count', for example, was a template
  in outer context and was redefined as, say, 'int count;' inside a
  function, and then assuming code '... expr ? count < 5 : true ...'.
  With this specific combination and connection, the instrumentation
  resulted in non-compilable code. Now corrected.

- Bug fix: (C++11 feature) If '&' occurred in the trailing return
  type of a function, e.g. 'auto foo() -> int & {...}', the function
  remained uninstrumented. Now corrected.

- Bug fix: If C++11's new attribute specifier [[...]] occurred in
  the following context, e.g. 'void f [[ noreturn ]] () {...}',
  the function remained uninstrumented. Now corrected.

- Change: When C# and Java code, identifiers are now allowed to begin
  also with an ascii character code 128-255. (Already allowed after
  the first char in v7.1.1).

- Change: When Java code, 'finally' is instrumented like '__finally'
  in VC++. Previously it was not instrumented at all.

- Change: When Java code, a 'for' statement with an empty condition,
  like 'for(...;;...)' is instrumented as if it were 'for(...;true;...)'
  and not like 'for(...;1;...)', which does not compile as Java code.

- Change: When Java code, the function end-brace does not get a probe
  any more.


In CTC++ to HTML converter (ctc2html):

- Change: Now the -s options are used also for correctly grouping the
  source files to directories at Directory/Files/Functions Summary
  pages. Previously the -s options were used only for finding the
  source files for being able to generate the html'ized Execution
  Profile page on the files.

- Change: Some small/optical changes in the HTML report.


General:

- CTC++ User's Guide is still at v7.1.1 level (ctcug.pdf).


Version 7.1.1  (8 April 2013)
-----------------------------

This revision 7.1.1 of CTC++ has the following version numbers in its
components:

    Preprocessor               7.1.1 (was 7.1; seen by -h option)
    Run-time libraries         7.1   (unchanged; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              7.1.1 (was 7.1; seen by -h option
                                     and in the listings)
    Header file ctc.h          7.1   (unchanged; seen in the file)
    Configuration file ctc.ini 7.1   (unchanged; seen in the file)
    CTC++ to HTML Converter    3.3   (was 3.2; seen by -h option)
    CTC++ to Excel Converter   2.0   (unchanged; seen by -h option)
    CTC++ Merger utility       2.0   (unchanged; seen by -H option
                                     and in the merged listings)
    ctc2dat receiver utility   3.1   (unchanged; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio IDE Integration
                               4.1   (unchanged; seen by clicking the
                                     Tw-icon in the dialog program and
                                     selecting "About...")

    CTC++ Wrapper for Windows  3.0   (unchanged; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.3   (unchanged; seen by -h option)


This CTC++ v7.1.1 version contains enhancements and bug fixes:

In the CTC++ preprocessor (ctc):

- Bug fix: the following kind of code (C++11) inside functions
     int* p = new int[3] { 1, 2, 3 };
  was erroneously identified and instrumented as a parameterless
  lambda function. Now corrected.

- Bug fix: If the code is C#, lambda functions are not even tried to
  be instrumented. (In C# lambda functions are quite different from
  ones in C++).

- Bug fix: If a function had both the trailing return type (C++11)
  and a function-try-block, e.g.,
     auto f(...) -> int try {...} catch(...){...}...
  the catch block(s) remained uninstrumented. Now corrected.

- Bug fix: If #pragma CTC SKIP/ENDSKIP clauses were used in an
  unbalanced way in the connection of 'try{...}catch(...){...}...',
  the generated symbolfile could become erroneous, and ctcpost could
  crash. Now corrected.

- Bug fix: If there was a ternary-?: expression in certain contexts,
  e.g. at the very beginning of a function body 'f(){ expr ? ...',
  the instrumentation yielded non-compilable code.

- Bug fix: For C# code, now properly handling operators '=>' and '??'.

- Bug fix: For Java code, now properly handling operator '>>>=' when
  parsing ternary-?: expressions.

- New: Primarily for C#'s sake, but allowing in all languages, the
  character '@' is now accepted in identifiers.

- New: When C# code, ascii character codes 128-255 are now allowed
  in identifiers, but not as the first character.


In the CTC++ postprocessor (ctcpost):
- Bug fix: In the XML report generation, the function end-brace item
  (<probe type="function_end_nr" line="x" .../>) came differently to
  the report depending on if the instrumentation was initially for
  function coverage or if the instrumentation was for higher coverage,
  but reduced to function coverage with the ctcpost -ff option. Now
  the function end-brace item comes to the XML report in both cases
  telling the function end-line number.

- Bug fix: made ctcpost more robust (against crash!), if there are
  unbalanced control structures in the input symbolfiles.


In CTC++ to HTML converter (ctc2html):

- Change: In the start page (Files Summary), the file links now lead
  directly to the detailed Execution Profile of the file. This is now
  considered simpler and faster. Navigation via the Functions Summary
  page to a file or to a file's specific function is still supported.

- New: New Overall Summary page is generated. It contains the Directory
  (and Files) Summary page header lines (what input was used in
  generating the Execution Profile) and the bottom line statistics.

- Change: If there would be too many header lines at a Directory
  Summary or Files Summary page, only the first few lines are shown
  at this page. (Full list is shown in the Overall Summary page.)

- Change: The default font size increased +25% in the HTML pages.

- New: introduced some --enable-XXX options. They can be used for
  fine-tuning e.g. some color, highlighting, font size, etc. issues
  of the generated HTML pages. See more 'ctc2html --enable-help'.


General:

- CTC++ User's Guide upgraded to v7.1.1 level (ctcug.pdf).


Version 7.1  (30 January 2013)
------------------------------

This revision 7.1 of CTC++ has the following version numbers in its
components:

    Preprocessor               7.1  (was 7.0.2; seen by -h option)
    Run-time libraries         7.1  (was 7.0.2; seen by 'ident'
                                    command applied on the library
                                    in some environments)
    Postprocessor              7.1  (was 7.0.2; seen by -h option
                                    and in the listings)
    Header file ctc.h          7.1  (was 7.0; seen in the file)
    Configuration file ctc.ini 7.1  (was 7.0.2; seen in the file)
    CTC++ to HTML Converter    3.2  (was 3.1; seen by -h option)
    CTC++ to Excel Converter   2.0  (unchanged; seen by -h option)
    CTC++ Merger utility       2.0  (unchanged; seen by -H option
                                    and in the merged listings)
    ctc2dat receiver utility   3.1  (was 3.0; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio IDE Integration
                               4.1  (was 4.0; seen by clicking the
                                    Tw-icon in the dialog program and
                                    selecting "About...")

    CTC++ Wrapper for Windows  3.0  (unchanged; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.3  (unchanged; seen by -h option)


This CTC++ v7.1 version contains enhancements and bug fixes:

In the CTC++ preprocessor (ctc):

- New: Various new C++11 standard constructs are now properly handled
  (and instrumented where appropriate)
  -- New keywords: alignas, alignof, char16_t, char32_t, constexpr,
     decltype, noexcept, nullptr, static_assert, thread_local
     (In particular, keywords char16_t, char32_t and decltype are
     recognized in a function parameter list and in a declaration
     in condition.)
  -- Trailing return type of a function, e.g.,
        auto f() -> int { ... }
  -- The noexcept or noexcept(...) specification in functions, e.g.,
        auto bar() noexcept(f(v.at(0))) -> int { ... }
  -- New kind of member initializers, e.g.,
        S(int x, double y) : m{x}, n{y} {}
  -- Defaulted or deleted functions, e.g.,
        NonCopyable() = default;
  -- The specifiers 'new', 'final' and 'override' in functions, e.g.,
        virtual void f() const final;
        void g(int) override { ... }
        virtual void h(char *) new { ... }
  -- The specifiers 'final' and 'explicit' in classes, e.g.,
        class C final { ... };
        struct D explicit : public B { ... }; 
  -- Attribute specifiers: [[...]]
  -- Scoped and strongly typed enums (enum class/struct; underlying
     type), e.g.,
        enum class Color : unsigned int { black, white };
  -- Lambdas (lambda functions):
     - lambdas in global scope are instrumented like normal functions;
       in reports they are shown with the name "lambda-[]"
     - lambdas inside normal functions: the outermost lambdas are
       instrumented while inner ones as well as lambdas in return
       statements etc. are not instrumented; shown "lambda-[]()"
       in reports
  -- The 'constexpr' specifier prevents all instrumentation
     (of a declaration or definition that it is applied to)
  -- Templates: the '>>' token is treated as two right angle brackets
     instead of a right shift operator in the following kind of
     cases
         template <typename T = X<int>> class A ...
     (In nested instantiations, e.g., T1<T2<T3>>, '>>' has been
     supported already as of v6.5.2)
  -- Range-based loop statement, e.g.,
        for (auto x : v) { ...
     is instrumented with a counter in the beginning of the loop body
  -- Suffixes (syntactically identifiers) in string and character
     literals, e.g.,
        "1234"ssuffix, '?'csuffix

- Bug fix: Now accepting extension __restrict (by VC++ and GCC) and
  __restrict__ (by GCC) after a function's parameter list, e.g.,
     void C::memb() __restrict { ... }
  (Previously such functions were not instrumented.)

- New: the loop constructs 'while' and 'for' declaration in condition,
  'for each' (by VC++), and 'foreach' (by C#), e.g.
      while (int i = f()) { ...           // C++
      for (...;int i = f();...) { ...     // C++
      for each (Char c in MyString) { ... // VC++ extension
      foreach (String str in list) { ...  // C#
  These are now instrumented in the same way as the C++11 range-based
  loop having one counter in the beginning of the loop body.

- New: The following kind of template declaration/definition is now
  handled correctly
     template <class T, bool B = 1 < 2> class X ...
  Note the relational operator '<' between the angle brackets!
  (This seems to be accepted by some compilers, not by some others!)

- Change: Single-line comments are now supported in compiler/linker
  response files and in ctc's own response files. If the very first
  character in the response file line is '#', the whole line is treated
  as a comment.

- New: New configuration parameters EXT_JAVA and EXT_CSHARP. These are
  partly "future reservations", except that C#'s foreach loop is
  recognized only if the source file extension is listed in EXT_CSHARP.

- New: Java's operator '>>>' is now correctly recognized.

- Bug fix: If there were, after the keyword class, struct, or union,
  consecutively two or more such specifiers that take arguments in
  parentheses, e.g., __declspec(...) or __attribute__((...)), ctc
  did not recognize the class correctly, and its inline member
  functions were not instrumented. For example, 
     struct __declspec(...) __declspec(...) S { ... };
     class __attribute__((...)) __attribute__((...)) C { ... };

- Bug fix: When ctc sees a command like
     ctc possible_ctc_options command options
  i.e. the compile or link 'command' has no file arguments, ctc
  just executes the command with its options. Previously, ctc tried
  to link the CTC++ run-time library into the "target" (unless the
  configured command TYPE was just 'compiler').

- Change: A misplaced #pragma CTC COUNT/APPEND/INIT/QUIT causes only
  a warning. Previously this was a syntax error.


In the CTC++ run-time library:

- New: On Windows platform, added libctc64.a which is a 64-bit
  GCC import library for the CTC++ run-time library, ctcmsnt64.dll
  (MinGW/Cygwin 64-bit code use at Windows).


In the CTC++ postprocessor (ctcpost):

- Bug fix: In statement coverage calculation corrected a bug when at
  the last "}" of a "switch() {}" or "try {}...catch(e) {}" construct
  it was tried to determine if the statements after the last "}" are
  flown-to in execution. Previously a function could get statement
  coverage hits even if the function was not called at all.

- Bug fix: In statement coverage calculation corrected a bug in goto
  statement execution flow analyses. Previously too high TER% could
  be reported under certain conditions.

- Change: In structural and statement coverage TER%, the 0.5 rounding
  is done in a new way at 0.0-0.5 and at 99.5-100.0. Now 0% is reported,
  when there are no hits whatsoever, and 100% is reported only when
  everything is covered.


In CTC++ to HTML converter (ctc2html):

- Bug fix: Corrected HTML report starting problem in 64-bit Windows.


In Visual Studio IDE integration (Windows version only):

- Enhancement: Improvements in installation
  -- support on VS2010 and VS2012 (no more manual step needed)
  -- CTC++ is set usable on all VS platforms (previously only on Win32)
  -- support on some Visual Studio Express variants
  See details from Vs_integ folder.


In Sym_cw subfolder (Windows version only):

- Removed: CTC++ support for Codewarrior compiler (Symbian EPOC emulator
  use) is dropped off. The whole folder is removed.


General:

- Compatibility: The CTC++ files that have been created with
  CTC++ v7.0.x can be further used with CTC++ v7.1.

- CTC++ User's Guide upgraded to v7.1 level (ctcug.pdf).


Version 7.0.2  (29 February 2012)
---------------------------------

This revision 7.0.2 of CTC++ has the following version numbers in its
components:

    Preprocessor               7.0.2 (was 7.0.1; seen by -h option)
    Run-time libraries         7.0.2 (was 7.0; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              7.0.2 (was 7.0.1; seen by -h option
                                     and in the listings)
    Header file ctc.h          7.0   (unchanged; seen in the file)
    Configuration file ctc.ini 7.0.2 (was 7.0; seen in the file)
    CTC++ to HTML Converter    3.1   (was 3.0; seen by -h option)
    CTC++ to Excel Converter   2.0   (unchanged; seen by -h option)
    CTC++ Merger utility       2.0   (unchanged; seen by -H option
                                     and in the merged listings)
    ctc2dat receiver utility   3.0   (unchanged; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio 2003-2010 IDE Integration
                               4.0   (unchanged; seen by clicking the
                                     Tw-icon in the dialog program and
                                     selecting "About...")

    CTC++ Wrapper for Windows  3.0   (unchanged; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.3   (unchanged; seen by -h option)


This CTC++ v7.0.2 version contains small enhancements and bug-fixes:

In the CTC++ preprocessor (ctc):

- New: Introduced NO_INCLUDE configuration parameter. Now with triple
  EXCLUDE, NO_EXCLUDE, NO_INCLUDE the following use convention comes
  possible for selecting the files to be instrumented: First
  "EXCLUDE=*", then "NO_EXCLUDE=some dirs and files", and finally
  "NO_INCLUDE=%INCLUDES%,and these dirs and files". Current use
  convention, where NO_INCLUDE is empty, works as before.

- New: Now in SKIP_FUNCTION_NAME argument list wildcards can be used.

- New: In the optional/additional instrumentation phases in scripts
  RUN_BEFORE_ALL, RUN_AFTER_CPP, RUN_AFTER_INSTR and RUN_AFTER_COMP the
  used instrumentation options can be read from environment variable
  CTCOPTS. [Came in v6.5.6, but was forgotten to mention then]

- New: Now correctly parsing new C++11 standard character literals that
  are prefixed with u, U, e.g. U'x'. (prefix L was handled already)

- New/changed: Now correctly parsing new C++11 standard string literals
  that are prefixed with u8, u, U, R, uR, u8R, UR, LR, e.g. U"abc".
  (plain L and S prefixed string literals were handled already).

- Change: When a multi-line string literal, e.g. "abc\
  defg" needs to be stored in the symbolfile (MON.sym), it is there
  as a one-liner like "abc\defg" (previously "abcdefg").

- Change: If #pragma CTC SKIP/ENDSKIP have been used inside a function,
  a warning of it is given as before, but now the the function is
  labeled as "no statement coverage available".

- Change: Control-C disabling is shortened to the time when the
  symbolfile (MON.sym) is actually being accessed. Previously Control-C
  termination was disabled effectively all the time, which prevented
  aborting of a long run (when many files to instrument).

- Change: It is now a warning if the issued "double compilation"
  command fails. Instrumentation is tried anyway. Previously this
  terminated the ctc run.

- Bug fix: Fixed a bug if in the connection of RUN_BEFORE_ALL some
  later phase failed. Occurred only at Linux, ctc crashed.

- Bug fix: Now __pragma(...) is recognized properly in function profile
  after parameter list. Previously the function remained uninstrumented.

- Bug fix: Fixed a bug when constructs like 'if (v<int>* = ...) {...'
  were instrumented erroneously (non-compilable code), if -no-templates
  option was used.


In the CTC++ postprocessor (ctcpost):

- Bug fix: Corrected statement coverage reporting in a couple of cases,
  for example sometimes statements after 'try{...}catch(...){...}...'
  could remain uncounted even though they were executed.

- Change: If at instrumentation time a function was labeled as
  "no statement coverage available", it is reported as 0/0 (as if 0
  statement executed of total 0 statements). Because all control paths
  are not known, statement coverage would be grossly biased anyway.


In CTC++ to HTML converter (ctc2html):

- New: Made the summary level HTML pages more clear by adding to the
  structural TER% and histogram columns a header text "MC/DC",
  "multicondition", "decision", etc. telling what coverage type the
  numbers and the histogram stand for.

- New: Support for UTF-8 encoding added. This means better HTML code
  generation when Japanese, Chinese, Cyrillic, euro sign, "A a O o
  with dots", etc. category of characters.


General:

- CTC++ User's Guide upgraded to v7.0.2 level (ctcug.pdf).


Version 7.0.1  (14 October 2011)
--------------------------------

This revision 7.0.1 of CTC++ has the following version numbers in its
components:

    Preprocessor               7.0.1 (was 7.0; seen by -h option)
    Run-time libraries         7.0   (unchanged; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              7.0.1 (was 7.0; seen by -h option
                                     and in the listings)
    Header file ctc.h          7.0   (unchanged; seen in the file)
    Configuration file ctc.ini 7.0   (unchanged; seen in the file)
    CTC++ to HTML Converter    3.0   (unchanged; seen by -h option)
    CTC++ to Excel Converter   2.0   (unchanged; seen by -h option)
    CTC++ Merger utility       2.0   (unchanged; seen by -H option
                                     and in the merged listings)
    ctc2dat receiver utility   3.0   (unchanged; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio 2003-2010 IDE Integration
                               4.0   (unchanged; seen by clicking the
                                     Tw-icon in the dialog program and
                                     selecting "About...")

    CTC++ Wrapper for Windows  3.0   (unchanged; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.3   (unchanged; seen by -h option)


This CTC++ v7.0.1 is a small bug-fix version. Effectively only the
preprocessor (ctc) and postprocessor (ctcpost) components have changed.
Also some minor enhancements have been made.

The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- Bug fix: Keyword 'typename' is now correctly recognized in a
  declaration in condition. Previously, this resulted in an
  instrumented file which did not compile. E.g.,
     if (typename T::Y obj = expr) { ...

- Bug fix: Keyword 'typename' is now correctly recognized in a parameter
  list. Previously, this resulted in an uninstrumented function. E.g.,
     void memb(typename T::Y p) { ... }

- Change: When handling the ctc option -2comp, or when there is some
  compiler option that is listed in the OPT_DO_2COMP configuration
  parameter, the "double compilation" is now done only once per the
  original compiler command, and exactly with the options and arguments
  in the original command line. Previously, there could be problems with
  some compilers, because the "double compilation" command could be
  differently constructed.

- Change: In verbose mode (-v option) instrumentation, the message
  "ctc: updating abspathto\MON.sym" is divided into three more
  informative messages. Now it is displayed (with explanation):
  -- "ctc: adding file to abspathto\MON.sym"
     (New instrumented file in the symbolfile; gets a new timestamp)
  -- "ctc: updating file in abspathto\MON.sym"
     (Re-instrumentation of a file in the symbolfile, but the file has
     changed; gets a new timestamp which is greater than the old one)
  -- "ctc: unchanged file in abspathto\MON.sym"
     (Re-instrumentation of a file in the symbolfile, but the file has
     not changed; inherits the old timestamp)


In the CTC++ run-time library:

- Bug fix: The Linux, Solaris and HPUX 64-bit libraries (libctc64.a)
  are now position-independent code (PIC), and can be linked also to
  shared objects (shared libraries).


In the CTC++ postprocessor (ctcpost):

- Bug fix: With files having no compilable code, with some compilers
  (e.g. gcc), an instrumented file can get a description in the
  symbolfile indicating that the file contains 0 source lines. In
  ctcpost v7.0, this triggered an aborting message "CTCPost error 5:
  Error in symbol file MON.sym". Now this sanity check is removed.

- Enhancement: In CTC++/Linux, removed the restriction that the
  generated report file could not be larger than 2 GB.


Version 7.0  (29 August 2011)
-----------------------------

This revision 7.0 of CTC++ has the following version numbers in its
components:

    Preprocessor               7.0   (was 6.5.7; seen by -h option)
    Run-time libraries         7.0   (was 6.5.5; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              7.0   (was 6.5.6; seen by -h option
                                     and in the listings)
    Header file ctc.h          7.0   (was 6.5.7; seen in the file)
    Configuration file ctc.ini 7.0   (was 6.5.7; seen in the file)
    CTC++ to HTML Converter    3.0   (was 2.7; seen by -h option)
    CTC++ to Excel Converter   2.0   (was 1.2; seen by -h option)
    CTC++ Merger utility       2.0   (was 1.1; seen by -H option
                                     and in the merged listings)
    ctc2dat receiver utility   3.0   (was 2.0; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio 2003-2010 IDE Integration
                               4.0   (was 3.2; seen by clicking the
                                     Tw-icon in the dialog program and
                                     selecting "About...")

    Visual Studio 5-6 IDE Integration
                                     (removed; was 2.2; See usage
                                     instructions from "Visual Studio
                                     2003-2010 IDE Integration"'s
                                     readme.txt)

    CTC++ Wrapper for Windows  3.0   (was 2.8; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.3   (unchanged; seen by -h option)


This CTC++ v7.0 is a major upgrade version. This is not compatible to
the previous v6.x version level. Symbolfile (default MON.sym) and
datafile (default MON.dat) data structures have changed. Instrumentation
macros (technical instrumentation style determined by ctc.h) have
changed. The coverage and timing report layouts have changed a bit.
The overall look-and-feel of the tool use is unchanged however.

The major enhancements in this version are:

- Reporting of statement coverage.

- Explicit reporting of MC/DC coverage (modified condition/decision
  coverage). Previously it had to be concluded from multicondition
  coverage reporting.

- Added maximum time reporting in timing instrumentation.

- In license control upgraded from Flexlm v9.2 to v11.9.1 use.


Users of "CTC++ Host-Target add-on" (HOTA, was v4.0) need to upgrade to
HOTA v5.0, which is compatible to CTC++ v7.0 (host-only). HOTA v5.0
is released at the same time as this CTC++ v7.0.

Users of "CTC++ for Symbian Target Devices add-on" (CTC4STD, now at
v4.2) and "CTC++ Host Run-Time add-on" (CTCHRT, now at v1.0) need to
wait upgrades on them until they can switch to CTC++ v7.0 use. 


The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- Change: Now function end is instrumented only if the function is a
  void function, and if the function end is reachable. Also, if the
  function end gets a probe, it will be included in TER% calculation.

- Change: Now try-block end is not instrumented. Previously, if it was
  reachable, it got a probe, but which however was not included in the
  TER% calculation.

- Change: Previous one timing instrumentation mode "-i t" is split to
  two modes "-i ti" and to "-i te", meaning inclusive and exclusive
  timing correspondingly. No more the -DCTC_INCLUSIVE_TIMING macro way
  to select the inclusive/exclusive timing. 

- New: A label, like "L:", is now recognized when instrumenting the
  code. It does not get a probe, but it shows in the profile listing.
  The ctcpost utility can now make proper statement coverage analysis
  if "goto L;" statements have been executed.

- Change: If in if, for, while, do-while, ternary-? statement the
  condition expression is a constant, e.g. "while (1) {...}", it is
  now instrumented. In TER% calculation its execution is required,
  but it suffices, if only the true or false evaluation (as the case
  may be) is executed.

- Removed: "#pragma DETACH datafilename" feature finally removed.
  Previously it was already announced as obsolete.

- New: In symbolfile it is now maintained on each instrumented file
  rewrite (rwr) and update (upd) counters. They can be seen by 
  "ctcpost -L ...". rwr-counter is incremented when the file's
  description is rewritten in the symbolfile (=> the file gets new
  timestamp, which has its implications in later phases of the tool
  chain). upd-counter is always zero (future reservation).

- Change: When in -v (verbose) mode ctc writes its messages to the
  screen (to stderr), they are prefixed with "ctc: " for more clearly
  indicating "who has written what" (e.g. make tool/compiler/ctc).

- New: New configuration parameter OPT_DO_2COMP. Its argument is a list
  of options, and if any such option is in the compile command line, a
  "double compilation" is done as if explicit -2comp option were given.

- Change: When instrumenting for multicondition coverage (-i m), and
  if a function does not have such condition expressions, where that
  instrumentation mode would be needed, generation of ctc_m auxiliary
  variable is optimized away from the function. Previously it was
  generated always and some compilers in their pedantic mode gave a
  warning of an unused variable.

- Change: Now in -v (verbose) mode ctc displays the used symbolfile
  name with absolute path (documentary and helps problem solving).

- Change: Plain "ctc -V" command now displays the tool header messages,
  loads configuration files and makes license check. No more error
  message of a missing command. Meant to be used for license checking.

- Change: Configuration parameters OPT_COMPILE_ONLY, OPT_COMP_OUT and
  OPT_LINK_OUT can now be a lists. Needed because some compilers allow
  alternate ways to specify these options.

- Change: When reinstrumenting a source file the last update time of
  the symbolfile (shown e.g. in profile listing header) is now updated
  only if the description of the source file really changes in the
  symbolfile. Previously it was updated at every instrumentation run,
  regardless if the source file description changed or not.

- Change: When generating CTC_FID (a #define in the instrumented code,
  which is used in CTCHRT and in some other special cases), it will now
  be composed of 20 bit CRC of the file name + 12 bit of the timestamp.
  Previously it was 12 bit CRC + 20 bit timestamp. Need on this arose
  of fast/parallel build systems, which could in the same second do
  many instrumentations and the 12 bit CRC could give duplicates.


In the CTC++ run-time library:

- New: In the datafile, at each coverage data block of an instrumented
  file, it is now maintained rewrite (rwr) and update (upd) counters.
  They can be seen by "ctcpost -L ...". rwr-counter tells how many times
  old coverage data for the file has been overwritten (restarted from
  zero). This happens when timestamps do not match. upd-counter tells
  how many times the file's coverage data has been summed up (the
  timestamps had matched).

- Change: Fine-tuned the sanity checks how the run-time watches that
  its data structures are healthy in main memory and in the datafile.


In the CTC++ postprocessor (ctcpost):

- New: Statement coverage is automatically reported on functions, files
  and overall, if the code has been instrumented at least for decision
  coverage.

- New: New option -fmcdc (reduce to MC/DC coverage view). This gives
  explicit MC/DC coverage analysis of a condition expression containing
  && or || operators.

- Change: In the profile listing overall summary there is more complete
  information; not only the obtained TER% (e.g. 60%) but also the 
  the "covered/all" data of which the TER% was calculated (e.g. 18/30).

- Change: Fine-tunings in the report layouts, e.g. for statement and
  MC/DC coverage.

- Change: The report line can now come to as long as it takes, default/
  maximum 4096 chars.

- Change: In profile listing the control structure nesting is no more
  affected by "extra" compound statements, i.e. by "{ ... }". Now the
  profile listing indentation more precisely shows what code is inside
  what control structure.

- Change: Removed option -s for textual summary report generation. Also
  the -T (threshold percent) option is removed. The HTML form report is
  now considered to be a more useful way to review the coverage data at
  various summary levels.

- New: In -l and -L listing options it is now displayed number of
  instrumented files in the symbolfile(s) and datafile(s). Is meant to
  help the user when volumes are big.

- New: In -L listing on symbolfiles and datafiles the rwr and upd counts
  on the instrumented files are shown. These help in problem solving,
  e.g. when explaining why the report shows zero coverage.


In the ctc2dat utility:

- Change: Adjusted to CTC++ v7.0 and HOTA v5.0 data structures.


In the CTC++ Wrapper for Windows (ctcwrap):

- Change: Some fine-tunings for usage in Symbian build system (SBS).

- Change: Rearchitectured the "ctcwrap -hard ..." arrangement. It can
  be used with makefiles, which invoke the compiler with absolute path.
  Read more from file ctcwrap-hard.txt from Doc folder.


In utilities CTC++ to HTML converter (ctc2html), CTC++ to Excel
converter (ctc2excel) and CTC++ Merger (ctcmerge):

- Change: Adjusted to handle CTC++ v7.0 level profile listing.


In Visual Studio 2003-2010 IDE integration:

- Change: Adjusted to handle new CTC++ v7.0 features.


In Visual Studio 5/6 IDE integration:

- Removed. Usage is possible by exporting makefile from the project and
  rebuilding by it and applying ctcwrap on the makefile.

- If you have been using this IDE integration with previous CTC++ v6.x.x
  versions, and want to continue its use (but no new CTC++ v7.0 features
  support), you can contact Testwell for instruction on how to make the
  old Visual Studio 5.0/6.0 IDE integration to work with CTC++ v7.0.


In Sym_cw subfolder (Windows version only):

- Change: Dropped off support on Codewarrior IDE integration. Support
  on Codewarrior use for Symbian EPOC emulator continues in command-line
  mode ("ctcwrap ... abld ..." and "ctcwrap ... sbs ..."). 


General:

- Change: The default installation location on CTC++/Windows is now
  C:\Testwell\CTC. On Windows Vista and 7 machines it works better,
  because it does not need administrator rights for modifications.



Version 6.5.7  (23 November 2010)
---------------------------------

This revision 6.5.7 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.5.7 (was 6.5.6; seen by -h option)
    Run-time libraries         6.5.5 (unchanged; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              6.5.6 (unchanged; seen by -h option
                                     and in the listings)
    Header file ctc.h          6.5.7 (was 6.5.6; seen in the ctc.h comments)
    Configuration file ctc.ini 6.5.7 (was 6.5.6; seen in the ctc.ini header)
    CTC++ to HTML Converter    2.7   (was 2.6; seen by -h option)
    CTC++ to Excel Converter   1.2   (unchanged; seen by -h option)
    CTC++ Merger utility       1.1   (unchanged; seen by -H option
                                     and in the merged listings)
    ctc2dat receiver utility   2.0   (unchanged; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    CTC++ IDE Integration      3.2   (unchanged; seen by clicking the
                                     Tw-icon in the dialog program and
                                     selecting "About...")

    Visual Studio 5/6 Integration
                               2.2   (unchanged; seen by clicking the
                                     TW-icon in the dialog program and
                                     selecting "About CTCui...")

    CTC++ Wrapper for Windows  2.8   (was 2.7; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.3   (unchanged; seen by -h option)


Since the v6.5.6 version there has come intermediate versions of the
ctc.exe/Windows component (v6.5.7b1, v6.5.7b2, v6.5.7b3) and of some
other auxiliary files. Some customers have got them. This v6.5.7 CTC++
version just collects them to one complete delivery package.

The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- Bug fix: Concerning C++ code and timing instrumentation, it could
  sometimes happen that the instrumented executable crashed or, perhaps,
  wrong timer values were produced. The reason was that there comes
  ctc-generated auxiliary functions into the instrumented file, and
  some linkers, under certain linking order, could assign the calls to
  neighbouring instrumented file. Now the instrumentation has been
  changed to work around the problem of such linker "freedoms".

- Bug fix: If there were adjacent '\' and '"' characters on the command
  line in a certain "problematic" way, e.g. -DMACRO=\"\\\"xxx\\\"\",
  the ctc-reconstructed command-line argument in the C-preprocessing
  and compilation commands generated by ctc could be erroneous or did
  not keep the user's intended value.

- Problem fix: When encountering __compile_time_assert(...) function
  prototype, its formal parameters are now skipped from instrumentation.
  The parameter specification contained a constant ternary-?:, which
  ctc instrumented, causing non-compilable code. This was a problem
  in Symbian code using the __ASSERT_COMPILE macro that expanded to
  this function.

- Problem fix: Changed inline assembly handling when MICROSOFT dialect
  in the following case, e.g. '....asm ("...."); }'. In this specific
  case the ';' is not considered to start a comment (as normally
  in Microsoft assembly). Benefit is that the '}' is no more "lost",
  which caused ctc to parse the source code control structures and to
  do the instrumentation incorrectly. This kind of code has appeared
  in Symbian code, which is compiled with armcc, and which ctc for
  certain reasons considers to have MICROSOFT dialect.

- Bug fix: In EXCLUDE and NO_EXCLUDE settings corrected the following
  wildcard category handling "*abcde" (a file name ending in certain
  way). Now in the "abcde" part, at Windows, also the directory
  separators '\' and '/' are considered equal (like the lower case
  and upper case letters are considered equal). This was a problem in
  some Symbian build arrangement, where mixed '\' and '/' was used.

- Change: The verbose notices like "ctc: creating MON.sym" and
  "ctc: updating MON.sym" are now written just at the time when the
  corresponding operation is done.

- Enhancement: The symbolfile locking is "sharpened" as a safeguard
  against a situation that there would arise a race condition in
  symbolfile creation when there are two instrumentation runs at the
  same time using the same symbolfile.

- Enhancement: Now, if the configuration file TMP_DIRECTORY setting
  already ends with a directory separator allowed at the platform
  ('/' at Unixes, '\' and '/' at Windows), ctc no more adds its own
  directory separator when constructing the names of its temp files.
  This was a problem in one Windows/Cygwin/bash case.


In the CTC++ Wrapper for Windows (ctcwrap):

- Bug fix: Similar -DMACRO=\"\\\"xxx\\\"\" handling fix as in ctc.exe.

- New: Added options -rvct41 and -rvct42. They are for RVCT 4.1 and
  RVCT 4.2 compiler use in Symbian sbs toolchain, similar behavior
  as with previous -rvct22, -rvct31, -rvct40 options.

- New: The environment variable CTCWRAPDIR_ROOT now serves as the
  directory whose subdirectories \ctc1, \ctc2, etc. are used as the
  location where "ctcwrap-integration-machinery" copies its auxiliary
  files. If CTCWRAPDIR_ROOT is not defined, TEMP will be used as before.
  This was needed for certain parallel build machine arrangements.

- Bug fix: In ctcagent.ex_, which is part of ctcwrap machinery:
  -- Similar -DMACRO=\"\\\"xxx\\\"\" handling fix as in ctc.exe
  -- Now with all currently known compilers (see wrapcmds.txt) the
     command line construction with overly-long commands (> 8K) is
     done by constructing a temporary response file and the command
     is invoked with system() call. With other (unknown) compilers no
     response file is constructed, instead the command is invoked with
     _spawnl() call, which does not have 8K command length restriction


In CTC++ to HTML converter (ctc2html):

- Enhancement: Added "Untested Code" page to the HTML pages.

- Change: Ternary expression is no more shown in Execution Profile
  page on separate grey line. It is now shown on the same line with
  the original source code, similarly as 'if' lines.


In Doc subfolder:

- Document combined-coverage.txt added


In Sym_cw subfolder (Windows version only):

- New auxiliary script handle_symdat.bat, but it is moved to
  Sym_armv5 folder and comes with CTC4STD v4.2 delivery package.

- New auxiliary script ctcslashfix.bat added.

- New auxiliary script ctcooptfix.bat added.

- New auxiliary script handle_cw_deps.bat added.


General:

- Minor refinements to configuration files (ctc.ini) and to ctc.h.

- CTC++ User's Guide is still at v6.5.6 level.



Version 6.5.6  (19 March 2010)
------------------------------

This revision 6.5.6 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.5.6 (was 6.5.5; seen by -h option)
    Run-time libraries         6.5.5 (unchanged; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              6.5.6 (was 6.5.5; seen by -h option
                                     and in the listings)
    Header file ctc.h          6.5.6 (was 6.5.5; seen in the ctc.h comments)
    Configuration file ctc.ini 6.5.6 (was 6.5.5; seen in the ctc.ini header)
    CTC++ to HTML Converter    2.6   (was 2.5; seen by -h option)
    CTC++ to Excel Converter   1.2   (was 1.1; seen by -h option)
    CTC++ Merger utility       1.1   (was 1.0; seen by -H option
                                     and in the merged listings)
    ctc2dat receiver utility   2.0   (unchanged; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    CTC++ IDE Integration      3.2   (unchanged; seen by clicking the
                                     Tw-icon in the dialog program and
                                     selecting "About...")

    Visual Studio 5/6 Integration
                               2.2   (unchanged; seen by clicking the
                                     TW-icon in the dialog program and
                                     selecting "About CTCui...")

    CTC++ Wrapper for Windows  2.7   (was 2.5; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.3   (unchanged; seen by -h option)


The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- Enhancement: Introduced four new configuration parameters for better
  handling of certain demanding use cases:

  -- RUN_BEFORE_ALL: user-defined script can fine-tune instrumentation
     options and do other actions before the actual "ctc-processing"
  -- OPT_ADD_PREPROC: e.g. for handling some problematic precompiled
     header file cases (adding -I options as needed)
  -- DATAFILE: explicitly determining the datafile path and name, and
     not deriving it from the symbolfile path and name
  -- OPT_NO_LINK: removing options from "ctc-link"

- Bug fix: The CTC++ preprocessor now recognizes "__pragma(...)", a
  Microsoft extension in VC++ 7.x and later. Previously, it could
  sometimes cause problems.

- Bug fix: Better handling of "__extension__ (...)" cases. Previously,
  it could happen that something was incorrectly instrumented. Now, as
  with GCC extensions in general, nothing is instrumented inside (...).

- Bug fix: Various GCC __attribute__ and __attribute extensions are
  now better handled, e.g. in the following cases:
     void abort(void) __attribute__((__noreturn__)) { }
     class __attribute__((aligned(16))) C { };
     typedef __attribute__((align(4))) class D { } DD;
     class E { } __attribute__((__packed__));
  Previously, for example, some function could remain uninstrumented.

- Bug fix. A declaration in condition could in certain cases be
  incorrectly instrumented. For example (occurred in QT code),
     template<typename T> class list;
     typedef long LONG;
     if (LONG list = f()) { }

- Bug fix: In some (apparently rare) cases, it could happen that a
  source file remained entirely uninstrumented. An example of the
  problem is that at the command line the source file name was given
  with an extra/unneeded "/./", but the compiler C-preprocessor had
  taken this away from the #line directive in the C-preprocessed file.


In the CTC++ postprocessor (ctcpost):

- Enhancement: Introduced new option -nf for unchoosing source files
  from output listings. Cf. option -f having reverse functionality.

- Enhancement: Now also symbolfiles can be combined (added) with the
  -a option. Previously, this was supported only for datafiles.

- Enhancement: It is now allowed to use -f (and the new -nf) option
  with the -a option to constrain the resultant symbolfile or datafile.

- Change: Now explicit -p is required to get an Execution Profile Listing.
  Previously, it could appear "suprisingly" with some option combinations.

- Change: In various reports, the report header information is adjusted
  a bit, esp. the Chosen/Unchosen source files (-f/-nf) information.


In the CTC++ Wrapper for Windows (ctcwrap):

- Enhancement: Added options -rvct22, -rvct31, -rvct40 and -no-conf-check
  to ctcwrap. (Symbian usage issues only)


In CTC++ to HTML converter (ctc2html):

- Enhancement: Now the directories of the used symbolfiles are also
  used as places where the source files are searched from (as if
  those directories were given last using the -s options)

- Bug fix: Corrected a case where an Execution Profile Listing contained
  no instrumented files (generated e.g. using ctcpost -f/-nf options).


In CTC++ Merge utility (ctcmerge):

- Bug fix: Now allowing Execution Profile Listing merging from its
  common #included portions also in a situation when the input listing
  is generated using ctcpost -ff (reduce to function coverage) option.
  Also a bug fix, if the code was instrumented for timing.


General:

- CTC++ User's Guide upgraded to v6.5.6 level.


Version 6.5.5  (5 October 2009)
-------------------------------

This revision 6.5.5 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.5.5 (was 6.5.4; seen by -h option)
    Run-time libraries         6.5.5 (was 6.5.4; seen by 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              6.5.5 (was 6.5.4; seen by -h option
                                     and in the listings)
    Header file ctc.h          6.5.5 (was 6.5.4; seen in the ctc.h comments)
    Configuration file ctc.ini 6.5.5 (was 6.5.4; seen in the ctc.ini header)
    CTC++ to HTML Converter    2.5   (unchanged; seen by -h option)
    CTC++ to Excel Converter   1.1   (unchanged; seen by -h option)
    CTC++ Merger utility       1.0   (unchanged; seen by -H option
                                     and in the merged listings)
    ctc2dat receiver utility   2.0   (unchanged; seen by -h option)

and the following version numbers in its Windows platform specific
components:

    CTC++ IDE Integration      3.2   (unchanged, except some enhancements
                                     in the installation script; seen by
                                     clicking the Tw-icon in the dialog
                                     program and selecting "About...")

    Visual Studio 5/6 Integration
                               2.2   (unchanged, except a minor enhancement
                                     in the installation script; seen by
                                     clicking the TW-icon in the dialog
                                     program and selecting "About CTCui...")

    CTC++ Wrapper for Windows  2.5   (was 2.4; seen by -h option)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix     1.3   (unchanged; seen by -h option)


The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- Bug fix: The instrumented file did not compile, if a 'case' or 'default'
  statement did not appear immediately inside a compound statement forming
  the switch body. Such "abnormal" 'case' and 'default' statements are
  no longer instrumented, and a warning message is given. E.g.,
  switch (0) case 0: { ... }

- Bug fix: In certain cases concerning template instantiations or
  specializations, ctc produced from a correctly written "< ::" the
  incorrect "<::". This happened if "< ::" was in parentheses between
  the angle brackets, e.g., T1<sizeof(T2< ::NS::T3>)>. Such cases
  occurred especially in the Boost C++ libraries.

- Bug fix: In certain cases concerning template instantiations or
  specializations, ctc "forgot" a space between 'typename' and the
  following identifier. This happened between the angle brackets, if
  there was #line (or #pragma) after 'typename', e.g.,
     T1<typename
     #line 123
     T2>         // in instrumented code 'typenameT2'
  Such cases occurred especially in the Boost C++ libraries.

- Bug fix: The instrumented file did not compile, if a template
  instantiation or specialization, e.g., T<sizeof("VeryLongString")>,
  was over 4096 characters. The limit is now 15000 characters, and an
  error message is given, if this limit is exceeded.

- Bug fix: If a member function specialization contained quotation marks
  and CTC++'s function call trace feature was used, the instrumented file
  did not compile. Further, if the specialization contained newlines,
  also the generated symbolfile was corrupted.
  For example,
     void T<sizeof("ABC")>::memb() { }
     void T<sizeof("ABCD\n\
EFGH\n")>::memb2() { }

- Bug fix: It could in certain cases happen that the instrumented file did
  not compile, if the following kind of GCC extension, a union (or struct
  or class) inside an expression, was encountered: ...( union { ... } )...

- Problem fix: Some C preprocessors (notably Visual C++) may produce from
  ...?...:M something like ...?...:::NS::T, if the macro M expands to
  ::NS::T. ctc parsed ':::' according to C++ rules to '::' and ':',
  but this is non-compilable (as is ':::'). Now this specific case is
  "corrected" to ':' and '::'.

- Bug fix: The instrumented file did not compile, if none of the functions
  in a file was instrumented (e.g., #pragma CTC SKIP was used), but
  nevertheless there was #pragma CTC APPEND in some function. (The same
  applied to other CTC++ instrumentation pragmas and to the configuration
  parameter EMBED_FUNCTION_NAME.)

- Change: A ternary expression (?:) is no longer instrumented, if it is
  inside a static definition, e.g., 'static Type object = M ? 0 : 1;'
  Previously, such expressions were instrumented in C++ but not in C.
  Instrumenting ones turns the initialization dynamic (if 'M' was initially
  a constant expression), which was a problem in some environments.

- Enhancement: The ARM RVCT compiler (v2.2) allows certain function
  qualifiers after the parameter list, e.g., int f() __softfp {...}.
  Such functions were not recognized by ctc. Now the following qualifiers
  __irq, __pure, __softfp, __swi, __swi_indirect, __swi_indirect_r7, and
  __values_in_regs are allowed, and these functions get recognized and
  instrumented.

- Documentation fix (ref. v6.5.2 level version.txt): ctc's support to
  allow ">>" as two closing angle brackets is limited to nested
  instantiations, e.g., T<T2<T3>> which is taken equivalent to T<T2<T3> >.
  But the following default template argument use is not allowed by ctc:
  template<class T1, class T2=A<int>> class X;

- Change: For future CTC++ needs, it is now ensured that when two or more
  source files are instrumented in a row, they are not given the same
  timestamps. There will be a difference of at least one second. This is
  not, however, warranted in parallel builds.


In the CTC++ run-time library:

- New: Added certain sanity checks against corrupted data:
  -- when instrumented source file registers itself to the CTC++ run-time,
     certain control information must not have nonsense values
  -- when coverage data is written from memory to a datafile, the control
     information must still be healthy
  -- when a datafile is read (for cumulating the coverage data), the
     data structures in the datafile must be healthy
  If these checks do not pass, the test run is aborted with an error
  message.


In the CTC++ postprocessor (ctcpost):

- Enhancement: It is now allowed to select with the -f option which source
  file(s) the listing options -l or -L will show. Examples:
     ctcpost -l -f "*\thefile.cpp" MON.dat
     ctcpost -L -f "*\dir1\*" -f "*\dir2\*" *.sym

- Change: The -l and -L listing options now display a description line of
  all encountered files. Previously, for example in a reinstrumentation
  situation, descriptions of old/discarded files were not displayed.

- Change: To reduce information bloat, removed some CTCPost notice messages,
  whose information value is not very significant, e.g., coverage data for
  a file is summed up from two datafiles. Now only such notice messages are
  given, which express some "abnormal" input from a symbolfile or datafile,
  e.g., some coverage data for a file is discarded.

- New: Added certain sanity checks against corrupted data when reading
  a datafile.


In the CTC++ Wrapper for Windows (ctcwrap):

- Enhancement: Added integration support (-hard option) for cases where
  the build system invokes the compiler with (absolute) path. For advanced
  users only! Read more from %ctchome%\Doc\ctcwrap-hard.txt.


In CTC++/Linux, /Solaris, /HPUX delivery packages:

- Change: New model how the installation is suggested to be done. The
  installation makefile is adjusted correspondingly.


Visual Studio .NET 2003/2005/2008 IDE integration:

- Enhancement: Installation procedure improved. Support for Visual Studio
  Express edition added. Read more from %ctchome%\vs_integ\version.txt.


Visual Studio 5/6 IDE integration:

- Enhancement: Minor improvement in the installation script ds_integ.bat.
  Read more from %ctchome%\devstud\version.txt.


General:

- CTC++ User's Guide upgraded to v6.5.5 level.


Version 6.5.4  (26 February 2009)
---------------------------------

This revision 6.5.4 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.5.4 (was 6.5.3 seen with the -h option)
    Run-time libraries         6.5.4 (was 6.5.3, seen by the 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              6.5.4 (was 6.5.3, seen with the -h option
                                     and in the listings)
    Header file ctc.h          6.5.4 (was 6.5, seen in the ctc.h comments)
    Configuration file ctc.ini 6.5.4 (was 6.5, seen in the ctc.ini header)
    CTC++ to HTML Converter    2.5   (was 2.4, seen with the -h option)
    CTC++ to Excel Converter   1.1   (unchanged, seen with the -h option)
    CTC++ Merger utility       1.0   (unchanged, seen with the -H option
                                     and in the merged listings)
    ctc2dat receiver utility   2.0   (new, previously part of CTC++
                                     Host-Target add-on)

and the following version numbers in its Windows platform specific
components:

    CTC++ IDE Integration      3.2   (unchanged, seen by clicking the Tw-icon
                                     in the dialog program and selecting
                                     "About...". This integration is used at
                                     - Visual Studio .NET 2003/2005/2008 IDEs
                                     - CodeWarrior IDE [Symbian/emulator]
                                     - Carbide.c++ IDE [Symbian/emulator])
                                     - Eclipse IDE

    Visual Studio 5/6 Integration 2.2
                                     (unchanged, version number seen by
                                     clicking the TW-icon in the CTC++ dialog
                                     boxes and selecting "About CTCui...")

    CTC++ Wrapper for Windows 2.4    (was 2.1, seen by "ctcwrap -h")

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix 1.3       (was 1.2, seen by "ctcwrap -h")


The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- New: Options -no-warnings and -no-comp have been added.

- Bug fix: Typedef'ed classes, structs and unions were not recognized
  and processed correctly, if the typedef keyword was followed by some
  qualifier or modifier. For example in the following:

     typedef const class C { ... } CC;
     typedef __declspec(...) struct D { ... } DD;

- Bug fix: An escaped backslash was not properly preserved in the tool
  chain (ctcwrap.bat, ctcagent.ex_, ctc.exe), when there was e.g. the
  following '... "X:\include dir\\" ...' on the command line.

- Bug fix: If a template instantiation, as a string, was longer than 1024
  characters, it was truncated, and the instrumented code did not compile.
  Example: T<sizeof("very...long...string")> t;.

- Bug fix (Windows only): Compiler/linker commands and source files were
  not identified at all or, in some cases, processed correctly, if given
  like 'C:cl' (vs. 'C:\dir\cl') or 'F:file.cpp (vs. 'F:\dir\file.cpp').

- Enhancement (Windows, MICROSOFT dialect, C++/CLI code only): Keywords
  'abstract' and 'sealed' are now properly handled in class and struct
  definitions. For example:

     ref class C abstract { ... };

  Keywords 'override', 'sealed' and 'new' are now properly handled in
  function declarations and definitions. For example:

     virtual int f() override { ... }

- Enhancement: In the -i m instrumentation, there is a limit on the
  evaluation alternatives that ctc can still instrument in the -i m
  way. The limit has grown from 270 to 500. Beyond that, the -i d
  instrumentation is used.

- Change: If the condition expression in if, for, while, do-while or
  ternary-?: is a literal, instrumentation is not done. Now for example
  'while (1) {...}' gets no true/false counters and in the TER calculation
  there is no "penalty" that the condition has not been evaluated in both
  ways.

- Enhancement: Some compilers (at least VC++ 8.0/9.0) allow the identifier
  'default' to be used as a user's variable name. Now the same is allowed
  by CTC++: identifier 'default' is considered the keyword 'default' only
  if it is followed by ':'.

- Problem fix (Windows only): The length of the compiler or linker command
  can now be longer than 2047 (Win2000) or 8191 (WinXP) characters. In
  practice, this was a problem only with such compilers and linkers that
  do not support the use of response files (e.g., the Symbian GCCE build
  environment). Normally, CTC++ uses response files with long command lines.

- Enhancement: If, after the instrumentation phase, it turns out that not
  a single function got instrumented, certain ctc-internal code is not
  generated. As this code would be unused, compiler warnings might follow.

- Enhancement: If the compiler, linker or other command emitted by the
  CTC++ preprocessor fails, the return code (other than 0 or -1) is now
  shown in the corresponding CTC++ error message. For example

    CTC++ error 8: Cannot execute C or C++ compiler or compilation \
    failed: 0xC0000005

- New: Introduced an arrangement how coverage data writing to a datafile
  can be activated periodically from a "side-thread". This is especially
  useful in never-ending process cases. See the CTC++ User's Guide.


In the CTC++ run-time library:

- New: On all supported host platforms (Windows, Linux, Solaris, HP-UX),
  introduced 64-bit support as standard part of the delivery package.


In the CTC++ postprocessor (ctcpost):

- Bug fix: ctcpost is made more robust in the extreme cases where the same
  source file was instrumented twice during one second (the granularity of
  CTC++ timestamp) but changed in the between. Counter data vector sizes
  could have changed. Previously, when processing such coverage data
  instances, ctcpost could give unpredictable results or crash.

- Change: 'ctcpost -h' or 'ctcpost' now exits with status 0 (was: 1). This
  is in accordance with 'ctc -h', and may be relevant in makefile use.


In CTC++ to HTML converter (ctc2html):

- Enhancement: Changed the titles of the HTML pages to more descriptive.

- Enhancement: Added "Top" links to the detailed Execution Profile HTML
  pages to support easier navigation.


In the CTC++ Wrapper for Windows (ctcwrap):

- Bug fix: In parallel use (ctcwrap command issued from separate command
  prompts), ctcwrap is made more robust against certain race conditions
  when reserving a %temp%\ctc<n> directory for its use.

- Enhancement: Added support for the new Symbian Build System (SBS).
  Its use is similar to the ABLD based builds. For example:

     ctcwrap -i d -v sbs -c winscw_udeb build

- Change: 'ctcwrap -h' or 'ctcwrap' now exits with status 0 (was: 1). This
  is in accordance with 'ctc -h', and may be relevant in makefile use.

- Enhancement: It is now checked that ctcwrap is not called recursively.


In the CTC++ Wrapper for Unix (ctcwrap):

- Enhancement: Added certain "sanity checks" that the CTC++ installation
  is healthy.

- Bug fix: An escaped dollar sign, e.g. \$ABC, is now properly handled.


General:

- CTC++ User's Guide upgraded to v6.5.4 level.


Version 6.5.3  (3 July 2008)
----------------------------

The previous version was v6.5.2. In it only the preprocessor (ctc[.exe])
component was new compared to v6.5. Since v6.5.2 there has been made
available two unofficial/intermediate ctc[.exe] versions v6.5.3b and
v6.5.3b2. The version comparison here is made to the v6.5.2 version.

Generally, this v6.5.3 is a bug-fix version (like v6.5.2), but now also
some other components than ctc[.exe] have been touched.

This revision 6.5.3 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.5.3 (was 6.5.2 seen with the -h option)
    Run-time libraries         6.5.3 (was 6.5, seen by the 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              6.5.3 (was 6.5, seen with the -h option
                                     and in the listings)
    Header file ctc.h          6.5   (unchanged, seen in the ctc.h comments)
    Configuration file ctc.ini 6.5   (unchanged, seen in the ctc.ini header)
    CTC++ to HTML Converter    2.4   (was 2.3, seen with the -h option)
    CTC++ to Excel Converter   1.1   (unchanged, seen with the -h option)
    CTC++ Merger utility       1.0   (unchanged, seen with the -H option
                                     and in the merged listings)

and the following version numbers in its Windows platform specific
components:

    CTC++ IDE Integration      3.2   (was 3.1, seen by clicking the Tw-icon
                                     in the dialog program and selecting
                                     "About...". This integration is used at
                                     - Visual Studio .NET 2003/2005/2008 IDEs
                                     - CodeWarrior IDE [Symbian/emulator]
                                     - Carbide.c++ IDE [Symbian/emulator])
                                     - Eclipse IDE

    Visual Studio 5/6 Integration 2.2
                                     (unchanged, version number seen by
                                     clicking the TW-icon in the CTC++ dialog
                                     boxes and selecting "About CTCui...")

    CTC++ Wrapper for Windows 2.1    (was 2.0, seen by "ctcwrap -h")

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix 1.2       (unchanged, seen by "ctcwrap -h")


The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- Problem fix: Some compilers (notably Visual C++) allow non-standard
  constructs like ...<::NameFromGlobalScope ...>... (A space should
  separate "<" and "::", as "<:" is a digraph for "[".) Such code may,
  however, occur in some commonly used header files (e.g., the Boost C++
  libraries). Now this is handled by parsing "<::" as two tokens "<"
  and "::". This problem existed since v6.1.

- Bug fix: If there was correctly written "... < :: ...>", it could under
  certain special conditions become "... <:: ...>" in the instrumented
  code, and this does not compile with most compilers. Now fixed. This
  bug existed since v6.5.

- Bug fix: If there was conditional compilation within a template
  instantiation, like the following

     SOME_TEMPLATE<...
     #ifdef AAA
     ...
     #else
     ...
     #endif
     ...>...

  the instrumented code became non-compilable (#line directives were
  embedded inside regular code lines). Now fixed. This bug existed
  since v6.5.

- Bug fix: The following kind of use case, a function returning
  pointer to function,

     Rtype (*Fname(parlist1))(parlist2){...}

  was not recognized, and the function remained uninstrumented.
  Now fixed. This bug existed since v6.4.

- Bug fix: If the following kind of construct, "__pragma(arguments)"
  preceded a function definition, it could in certain cases happen that
  the function was not recognized and remained uninstrumented. Now fixed.

- Enhancement: In parallel builds, where the same symbolfile (e.g.,
  MON.sym) is used, access to this file is serialised with a certain
  locking mechanism. An occasional inability to obtain the lock has
  been encountered in an LSF (Load Share Facility)/Linux Farm build
  environment where the symbolfile resided on a network drive. Now the
  algorithm is made more robust, and it seems to fix the problem. This
  problem existed since v6.3.

- Bug fix (Windows only): An UNC file name was not recognized as
  absolute. This could cause problems in these two cases.

  -- If the symbolfile was given as an UNC name, e.g.,

       ctc ... -n \\servername\dirname\filename.sym ... cl ...

     it caused later a run-time error when running the instrumented
     program, because the datafile's name converted to an absolute form
     (from the symbolfile name) was erroneous.

  -- If the instrumented source file was given as an UNC name, e.g.,

       ctc ... cl -c \\servername\dirname\sourcefile.cpp

     and the configuration parameter SOURCE_IDENTIFICATION was set to
     the value "absolute", the absolute name of the source file was
     erroneous in the symbolfile and in the listings.

- Bug fix (Windows only): When reinstrumenting a source file, the file
  name was given with different casing at the latter time, the file was
  considered to have changed even if it necessarily wasn't. This bug
  existed since v6.5.

- Enhancement: Optimised multicondition instrumentation. If the condition
  expression does not contain any && or || operators, its instrumentation
  is "reduced" to decision coverage, and the instrumentation overhead gets
  smaller. Also, the compiler error "operator && is ambiguous" (that could
  previously appear in some exceptional cases with C++) now disappears
  entirely from simple conditions like ...if (object)...

- Enhancement (Windows only): for each statements, a Microsoft C++/CLI
  extension in Visual C++ 8.0 (Visual Studio 2005) and later, are now
  allowed. Previously, CTC++ reported a syntax error. The for each
  statements, "for each(...in...){...}", are not instrumented, but they
  are shown in execution profile listings and other reports. So, usage
  of the for each construct does no more prevent from using CTC++
  with the C++/CLI code (the /crl option).

- Enhancement: Speeded up the operation of ctc[.exe].


In the CTC++ run-time library:

- Enhancement: A similar enhancement as was made in the preprocessor
  with its symbolfile locking behavior (see above) is done also to the
  run-time library with its handling of parallel access to the same
  datafile (e.g., MON.dat). However, there have been no reports that
  parallel access would have been any problem here.


In the CTC++ postprocessor (ctcpost):

- Bug fix (Windows only): If there were two or more descriptions of
  the same source file with different timestamps (possibly instrumented
  independently from scratch), but yet representing the same level
  of the source file, ctcpost erroneously rejected the coverage data
  aggregation (summing), even if the only difference was in the casing
  of the source file names. This bug existed since v6.5.

- Enhancement: In connection with multiple symbol (or data) files
  containing descriptions (or coverage data) of the same source files,
  ctcpost displays certain informative notices how the second instance
  (description or coverage data) of the source file is treated. A couple
  of these notices removed in v6.4 have now been restored.


In CTC++ to HTML converter (ctc2html):

- Problem fix (Windows only): The directory parts of the source file
  names are normalised in a certain way (to deal with different casing
  and the optional ".\" notation). Now, there appears only one entry
  per each individual directory in the summary level HTML pages.

- Some other technical and cosmetic fixes.


In the CTC++ Wrapper for Windows (ctcwrap):

- Some changes needed for handling the new CTC++/Eclipse integration.


In the IDE integrations on Windows:

- Some enhancements and a bug fix in the Visual Studio .NET 2003/2005/2008
  IDE integrations, read more from %ctchome%\Vs_integ\version.txt.

- Upgraded the CTC++ integration to work with Carbide.c++ v1.3.
  Previously only Carbide.c++ v1.2 was supported. Read more from
  %ctchome%\Sym_cw\version.txt

- Introduced IDE integration to Eclipse. Note that this is not a "plug-in"
  in the Eclipse sense. This is an arrangement, where the current dialog
  programs that are used in Visual Studio .NET 2003/2005/2008, Codewarrior,
  and Carbide.c++ IDE integrations are used also in Eclipse IDE. Read
  more from %ctchome%\Eclipse\readme.txt


Other Windows-specific issues:

- The installation program no more installs the license key (dongle)
  driver. We no more ship dongle-based licenses. Should a dongle driver
  be needed, it needs to be delivered and installed separately.


General:

- Enhancement: In heavy CTC++ use, and when the licensing arrangement
  is a floating license (by FLEXlm), it has sometimes happened that a
  license did not properly return to the pool of free licenses, not even
  when all linger and other timeout limits had expired. The license
  "hangs". Exact reason for this behavior is unknown. Now the license
  check-out/check-in arrangement has been changed so that the behavior
  should give minimally room for the "hung" licenses. Notably, the
  license manager no more needs to watch if the licensed program has
  been disconnected from the net or if it has possibly crashed.

- CTC++ User's Guide upgraded to v6.5.3 level.


Version 6.5.2 (6 March 2008)
----------------------------

This revision 6.5.2 of CTC++ is a bug fix version over CTC++ 6.5.
In this revision effectively only the preprocessor component has
changed. (On the Windows platform, a partially fixed ctc.exe v6.5.1
was made available, but here the changes are compared to v6.5[.0]).

    Preprocessor               6.5.2 (was 6.5, seen with the -h option)

All the other CTC++ subcomponents are unchanged from the v6.5 level
(see below the section "Version 6.5" for details).


The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- Bug fixes: Corrected 3 C++ specific cases, which may be not so common
  in typical code. The exact situations are too complex to explain in
  detail. However, it was needed that multiple namespaces, class forward
  declarations, typedef definitions for classes, inheritance, templates,
  instantiations were involved.

  -- Under some special conditions, the following kind of code

        ...if (Namespace::TemplateClass<Params> object = value)...

     was parsed erroneously resulting in non-compilable instrumented code.
     Now fixed.

  -- Under some special conditions, the following kind of code

        ...typedef OldClass X;      <-- in some namespace A
        ...
        ...class X : public Y {...  <-- in another namespace B

     caused ctc to crash. Now fixed.

  -- It is possible that an innocent-looking function local variable
     hides a template class or function name in an outer scope. Then,
     if there was the following kind of use

        ...int _Count = 5;          <-- hides an outer template _Count
        ...
        ...if (_Count < 10)...      <-- ctc failed here

     ctc parsed the code erroneously, resulting in, for example, ctc
     to report a syntax error or non-compilable instrumented code. Now
     fixed.

- Enhancement: Started to support ">>" as two closing angle brackets
  of nested template argument lists. For example, the following case

     ...templatename1<templatename2<int>>...

  We consider that this is actually against C++, but some compilers,
  for example VC++ 8.0, have started to allow this. And so does also
  ctc now.


Version 6.5 (12 February 2008)
------------------------------

This revision 6.5 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.5  (was 6.4, seen with the -h option)
    Run-time libraries         6.5  (was 6.4, seen by the 'ident'
                                    command applied on the library
                                    in some environments)
    Postprocessor              6.5  (was 6.4, seen with the -h option
                                    and in the listings)
    Header file ctc.h          6.5  (was 6.4, seen in the ctc.h comments)
    Configuration file ctc.ini 6.5  (was 6.4, seen in the ctc.ini header)
    CTC++ to HTML Converter    2.3  (was 2.2, seen with the -h option)
    CTC++ to Excel Converter   1.1  (unchanged, seen with the -h option)
    CTC++ Merger utility       1.0  (unchanged, seen with the -H option
                                    and in the merged listings)

and the following version numbers in its Windows platform specific
components:

    CTC++ IDE Integration      3.1  (was 3.0, seen by clicking the Tw-icon
                                    in the dialog program and selecting
                                    "About...". This integration is used at
                                    - Visual Studio .NET 2003 IDE
                                    - Visual Studio 2005 IDE
                                    - CodeWarrior IDE [Symbian/emulator]
                                    - Carbide.c++ IDE [Symbian/emulator])

    Visual Studio 5/6 Integration 2.2
                                    (was 2.1, version number seen by
                                    clicking the TW-icon in the CTC++ dialog
                                    boxes and selecting "About CTCui...")

    CTC++ Wrapper for Windows 2.0   (was 1.0, seen by "ctcwrap -h")

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix 1.2      (was 1.1, seen by "ctcwrap -h")


The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- New: Certain new information is now collected regarding the instrumented
  functions: file name and line number where declared, parameter profile,
  and "category" (public, protected, private, standalone). This information
  is shown in the new XML report (see ctcpost).

- Bug fix: When a destructor of a nested class is defined outside the class
  declaration, e.g.,

     Outer::Inner::~Inner() {...}

  its name is now shown correctly as "Outer::Inner::~Inner" in coverage
  listings. Previously it was erroneously shown as "Inner".

- Bug fix: Certain kind of bit field declarations caused non-compilable
  instrumented code, for example,

     struct S {...; TYPEDEF_NAME (field) : 4; ... };

  The following conditions were required to trigger the bug: the type
  specifier had to be a typedef name (not a basic type), there had to be
  extra parentheses around the member name, and it had to be followed by
  a colon and a bit-field width. Now fixed.

- Bug fix: If decision coverage instrumentation (the default) was used
  together with safe counter incrementing (i.e., the macro CTC_SAFE
  was defined), the following kind of condition

     if (ClassTypeObject) {...

  could in many cases cause non-compilable instrumented code (unless some
  suitable conversion function, e.g., "operator int()", was available).
  This was a problem with C++ (not C) code only. Now fixed.

- Change: In coverage listings, names of class template member functions
  and function template specializations are now shown with the <...>
  included. For example,

     long X<long>::foo(){...}         // now "X<long>::foo", was "X::foo"
     template <> int bar<int>(){...}  // now "bar<int>",     was "bar"

- Change: For example, in the following case

     void foobar
        (int i) {...

  the function's start line is now the line in which the function name
  'foobar' is located. Previously, the start line was that of the
  opening parenthesis of the parameter list. (Now, in the HTML report,
  the function start line is more accurately mapped to the source file.)

- New: A system error message - generated by a call to strerror(errno) -
  is now shown at the end of all file error messages. For example,

     CTC++ error 9: Cannot create file X:\MON.sym: Permission denied

- Change: Verbose messages (enabled by the -V and/or -v option) are now
  written to stderr. Previously they were written to stdout, which could
  cause problems in some special build scenarios.


In the CTC++ run-time library:

- Change: An explicit FLEXlm license check-in call is now done at the end
  of the instrumented program execution. The only case we know this to
  have some user-noticeable effect is the use of the Symbian EPOC emulator
  on Windows. In that context, the license linger count-down (time when
  the license is returned to the free license pool) will now start when
  the run of the instrumented program has ended within the EPOC emulator.
  Previously, it did not start until the whole EPOC emulator session had
  ended.


In the CTC++ postprocessor (ctcpost):

- New: Added option "-x outputfile" for generating an XML format report.

- Bug fix: ctcpost did not work correctly in the following situation
  -- there were two or more input .sym files
  -- which contained descriptions of the same instrumented source file,
     and the file descriptions were identical except for the timestamps
     (concluding that the same file was in question, but instrumented
     independently at different times)
  -- there were two or more input .dat files containing coverage data for
     this source file and the timestamps for this file matched in the
     .sym and .dat files (presumably separate test runs, using different
     instrumented versions of this file)
  The aggregation (summing) of the two or more coverage results failed.
  CTCPost internal error 11 was displayed and the run was aborted. Now
  fixed.

- Bug fix: ctcpost crashed, when "-a outputdatfile" option was used and
  the creation of the target datafile failed. Now fixed.

- New: A system error message - generated by a call to strerror(errno) -
  is now shown at the end of all file error messages. For example,

     CTCPost error 8: Cannot create file X:\profile.txt: Permission denied

- Change: The "CTCPost notice messages", if there are any, are now
  displayed always. Previously they were displayed only if the -v option
  was specified.

- Change: Verbose messages (enabled by the -V option) and notice messages
  are now written to stderr. Previously they were written to stdout.


In CTC++ to HTML converter (ctc2html):

- New: Added option "-o output-dir" (default directory is ./CTCHTML)

- Enhancement: The "-s source-dir" option behavior is extended so that
  source file searching is performed also based on relative directory
  paths.

- New: In the Directory Summary view of an HTML report, there is now
  JavaScript-based on-line sorting by various columns.

- New: Added option "-no-javascript". It prevents generation of Javascripts
  into the HTML report (they can be unwanted for some browsers or browser
  settings).


In the CTC++ Wrapper for Unix (ctcwrap):

- Change/bug fix: Now the same user can have multiple parallel and
  independent ctcwrap commands in execution. Previously, the technical
  solution to use the file ~/ctcopts.rsp to remember the ctc options
  prevented parallel use.


In the CTC++ Wrapper for Windows (ctcwrap):

- Enhancement: Now there can be parallel and independent ctcwrap commands
  in execution at the same time (each command running in its own command
  shell).

- Bug fix: For example, in the "ctcwrap ... abld ..." case, if the
  ctcwrapped command (here "abld") emitted an argumentless compilation
  command, e.g. "armcc", there was such an error that the compilation
  command was not executed at all. Now fixed.


In the IDE integrations on Windows:

- Visual Studio 5/6 IDE integration: Adjusted to CTC++ v6.5 level, notably
  the XML reporting. See %CTCHOME%\Devstud\version.txt.

- Visual Studio .NET 2003 and 2005 IDE integration:  Adjusted to CTC++
  v6.5 level, notably the XML reporting. Also some other "implementation
  technical changes". See %CTCHOME%\Vs_integ\version.txt.

- New: Checked that Visual Studio .NET 2003 / 2005 IDE integration works
  also with Visual Studio 2008.


In CTC++ for Symbian EPOC Emulator add-on:

- See %CTCHOME%\Sym_cw\version.txt.


General:

- CTC++ User's Guide upgraded to v6.5 level.


Version 6.4 (5 July 2007)
-------------------------

This revision 6.4 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.4  (was 6.3, seen with the -h option)
    Run-time libraries         6.4  (was 6.3, seen by the 'ident'
                                    command applied on the library
                                    in some environments)
    Postprocessor              6.4  (was 6.3, seen with the -h option
                                    and in the listings)
    Header file ctc.h          6.4  (was 6.3, seen in the ctc.h comments)
    Configuration file ctc.ini 6.4  (was 6.3, seen in the ctc.ini header)
    CTC++ to HTML Converter    2.2  (was 2.1, seen with the -h option)
    CTC++ to Excel Converter   1.1  (unchanged, seen with the -h option)
    CTC++ Merger utility       1.0  (unchanged, seen with the -H option
                                    and in the merged listings)

and the following version numbers in its Windows platform specific
components:

    CTC++ IDE Integration      3.0  (new, seen by clicking the Tw-icon
                                    in the dialog program and selecting
                                    "About...")

    This integration is now used at:
        - Visual Studio 2005 IDE integration (previous v1.0 "abandoned")
        - Visual Studio .NET 2003 IDE integration (previous v2.2 "abandoned")
        - CodeWarrior IDE integration (previous v1.4 "abandoned")
        - Carbide.c++ IDE integration (new)

    Visual Studio 5/6 Integration 2.1
                                    (unchanged, version number seen by
                                    clicking the TW-icon in the CTC++ dialog
                                    boxes and selecting "About CTCui...")

    CTC++ Wrapper for Windows 1.0   (new, seen by "ctcwrap -h")


and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix 1.1      (was 1.0, seen by "ctcwrap -h")


The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- Bug fix: Corrected a parsing bug with Visual C++ "parameter attributes"
  (Microsoft C++ extensions, enclosed in brackets). Notably, if "[...]"
  followed immediately the opening parenthesis beginning a parameter list,
  the rest of the source file was left uninstrumented. For example,

     long Method([in] long l, ...) ...

- Bug fix: Corrected a parsing bug with function declarations containing
  "extra" parentheses, for example,

     int (foo) (parlist) {...}  and
     int (bar (parlist)) {...}

  Previously, ctc just did not recognize these kind of functions, and did
  not instrument them.

- Bug fix: When multicondition instrumentation was selected and there was
  a certain kind of (but very big) conditional expression, ctc could fail
  with "out of memory" error message. Now this situation is handled better.

- New: New ctc option -2comp. It causes "double compilation", i.e. just
  before instrumentation a normal compilation with the original options
  is done. This is a way to generate correctly certain files which are
  dependent on the original source files, and which may be needed by later
  steps in the build tool chain.

- Change: Multiple -c options can now be used properly "append-wise".
  Previously, the configuration file(s) specified with the last -c option
  overrode the ones specified with earlier -c option(s).

- Change: The environment variables CTC_AFTER_CPP, CTC_AFTER_INSTR, and
  CTC_AFTER_COMP are no more used. Instead, the new configuration parameters
  RUN_AFTER_CPP, RUN_AFTER_INSTR, and RUN_AFTER_COMP are used for the same
  purpose. Additionally, these parameters are lists, i.e. each of them can
  specify more than one command (separated by commas) that are executed in
  the intermediate phases.

- Change: Plain "ctc" command behaves now like "ctc -h", and does not do a
  license check-out. Previously, it gave an error message (compiler command
  missing), and did the license check-out.


In CTC++ runtime library:

- No changes. (Except that a CTC++ v6.4 level ctc.ini file now required...)


In CTC++ postprocessor (ctcpost):

- Change (enhancement): Now if several symbolfiles (e.g. MON1.sym and
  MON2.sym) contain descriptions of the same source file (file.cpp), the
  descriptions are compared. If the descriptions are the same, ctcpost
  accepts and remembers them all. Previously, ctcpost remembered only the
  description for the source file having the latest timestamp.

  And when there are several datafiles (e.g. MON1.dat and MON2.dat)
  containing coverage data for the same source file (file.cpp), the
  coverage data is accepted and aggregated, if the timestamp is any of
  the accepted ones for this source  file.

  The rationale for this change is to facilitate the following use scenario:
  At time T1 a "ctc-build" (=> MON1.sym) and test runs (=> MON1.dat) are
  done. At time T2 the same is done "from scratch" (=> MON2.sym, MON2.dat).
  It is possible to get an aggregated coverage report of the test runs
  containing the data from both MON1.dat and MON2.dat. Previously that was
  not possible in this situation.

- Change: As with the CTC++ preprocessor, multiple -c options can now be
  used properly "append-wise".


In CTC++ to HTML converter (ctc2html):

- Bug fix (Windows only): Under some conditions there could appear messages
  "'perlglob' is not recognized as an internal or external command, operable
  program or batch file". Also, some temporary files in the CTCHTML directory
  remained undeleted. Now fixed.

- Bug fix (Windows only): If the source file identifications in the input
  profile listing contained directory separators sometimes '\', sometimes
  '/', the directory sorting did not work properly. Corrected.

- Bug fix: If the input profile listing was of type "function coverage only",
  the number of functions was erroneously calculated to 0 in the generated
  HTML summary pages. Corrected.


CTC++ Wrapper for Unix (ctcwrap):

- Change: Some technical implementation changes. Handling of option -2comp
  removed from this level.


CTC++ Wrapper for Windows (ctcwrap):

- New: Functionally quite similar to the Unix version. Different solution
  however and some Windows-specific matters have been settled.


CTC++ Visual Studio IDE integrations on Windows:

- Integration to Visual Studio 6.0 IDE is unchanged.

- Integrations to Visual Studio .NET 2003 IDE and to Visual Studio 2005 IDE
  are fully renewed. Usage is simpler and more "powerful". For example, a
  whole solution (= collection of projects) can now be built with CTC++ with
  one command.


CTC++ support on Symbian OS/EPOC emulator use at Windows:

- Support for the old VC++ 6.0/Visual Studio 6.0 IDE based way to do Symbian
  OS builds is discontinued. Notably, there is no more ctc-abld-wins command.

- CodeWarrior/command-line based use is changed. There is no more
  ctc-abld-winscw command. Instead, such builds are now done with ctcwrap,
  for example as follows:

     ctcwrap -i m -v abld build winscw udeb

- CodeWarrior IDE integration is fully renewed.

- Carbide.c++ IDE integration is introduced.


General:

- CTC++ User's Guide upgraded to v6.4 level.


Version 6.3  (31 January 2007)
------------------------------

This revision 6.3 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.3  (was 6.2.2, seen with the -h option)
    Run-time libraries         6.3  (was 6.2, seen by the 'ident'
                                    command applied on the library
                                    in some environments)
    Postprocessor              6.3  (was 6.2, seen with the -h option
                                    and in the listings)
    Header file ctc.h          6.3  (was 6.2, seen in the ctc.h comments)
    Configuration file ctc.ini 6.3  (was 6.2.1, seen in the ctc.ini header)
    CTC++ to HTML Converter    2.1  (was 2.0, seen with the -h option)
    CTC++ to Excel Converter   1.1  (unchanged, seen with the -h option)
    CTC++ Merger utility       1.0  (unchanged, seen with the -H option
                                    and in the merged listings)

and the following version numbers in its Windows platform specific
components:

    Visual Studio 2005 Integration 1.0
                                    (new, effectively an adaptation of
                                    Visual Studio .NET 2003 integration.
                                    Version number seen by clicking the
                                    Tw-icon in the CTC++ dialog boxes and
                                    selecting "About CTC++/VSI...", and
                                    in vs2005\version.txt)
    Visual Studio .NET 2003 Integration 2.2
                                    (unchanged, although some fixes in
                                    some "non-exe files". Version number
                                    seen by clicking the Tw-icon in the
                                    CTC++ dialog boxes and selecting
                                    "About CTC++/VSI...", and in
                                    vsnet\version.txt)
    Visual Studio 5/6 Integration 2.1
                                    (unchanged, although some fixes in
                                    some "non-exe files". Version number
                                    seen by clicking the TW-icon in the
                                    CTC++ dialog boxes and selecting
                                    "About CTCui...")
    CodeWarrior Integration 1.4     (was 1.3, seen in sym_cw\version.txt)

and the following version numbers in its Unix platform (Linux, Solaris,
HPUX) specific components:

    CTC++ Wrapper for Unix 1.0      (new, seen by "ctcwrap -h")


The corrections and enhancements in this version are the following:

In the CTC++ preprocessor (ctc):

- New: Concerning the configuration parameters EXCLUDE and NO_EXCLUDE:

  -- Introduced a special value '%INCLUDES%'. It matches all files that
     are included (directly or indirectly) into another file. Now the
     initial settings in all ctc.ini files are

        EXCLUDE = %INCLUDES%
        NO_EXCLUDE =

  -- The wildcard usage restrictions are relaxed. For example, the
     following is now possible:

        ctc ... -C "EXCLUDE+*\Dir2\*" cl ...

- New: Introduced a new configuration parameter SOURCE_IDENTIFICATION.
  The only allowed values are: as_given (default and pre-v6.3 behavior),
  basename, absolute, and absolute_without_drive. In the "CTC++ tool
  chain", the source files are stored, compared and reported using their
  names in the form defined by this configuration parameter. See the
  CTC++ User's Guide for more information.

- New: The argument of the configuration parameter COMMAND can now be a
  list (previously only one value). For example,

     COMMAND = cl, cl.exe
     COMMAND = gcc, gcc2, gcc3

  This is useful, if the same compiler/linker can be invoked with several
  different names, or if several compilers/linkers (or versions of them)
  can use the same configuration settings.

- New: Unicode response files are supported on the command line. For
  example,

     ctc ... cl ... @responsefile.rsp ...

  However, the support is limited to UTF-16 little-endian encoded files
  only. (Microsoft Visual Studio 2005 seems, by default, to generate its
  response files in this form.)

- Change: Option -k (keep) no longer implies option -v (verbose).

- Change: Symbolfile (and datafile) locking scheme no more uses the
  environment variable CTC_NO_LOCKING. Instead, the environment variable
  CTC_LOCK_MAX_WAIT is now used. If it has the value 0, the behavior is
  the same as it was with CTC_NO_LOCKING. Additionally, a user-definable
  maximum lock-waiting time (in seconds) can be specified by setting a
  value greater than 0. The default is 60 seconds, as before, if
  CTC_LOCK_MAX_WAIT is not defined.

- Bug fix: Corrected a buffer overflow error in case of very long #line,
  #pragma or other preprocessor directives, (caused unpredictable results).

- Bug fix: Corrected an instrumentation error in the following special
  case: in connection with the initialization of an array, class, struct,
  or union, there was a certain kind of type-name declaration having a
  constant ?: expression in brackets. For example,

     const CL c = { ..., (int (*)[M ? 1 : 2]) (expr), ... };

  Such a ternary ?: expression inside an initializer list is no longer
  instrumented, because it would result in a non-constant expression and
  non-compilable code. (This was fixed already in CTC++ v6.2, but the bug
  was re-introduced into CTC++ v6.2.1 in this particular brace-enclosed
  initializer list context.)

- Bug fix: Now more careful handling and protecting by quotes when there
  are characters '&', '|' or ';' (having special meaning to command
  shells) at the command line. For example, the following command,

     ctc ... cl ... -D "FOO=xx&&yy" ... somefile.cpp

  caused an error, because the quotes were missing in the C-preprocessing
  command internally constructed and emitted by ctc.

- Bug fix: Corrected an error, which could cause wrong line numbers to
  be shown in profile and HTML reports for example. This could occur in
  certain rather special cases, for example, if ctc encountered both
  #pragma and #line directives, while it was expecting the keyword 'else'.

- Bug fix: Corrected an error in the parsing of template angle brackets
  <...> containing relational '<' and/or '>' operators between the
  brackets. Now, for example the following is correctly parsed (T is a
  class template):

     T<..., ((A < B) ? (32) : (64)), ...> t;

  Previously the behavior was unpredictable. In one case, the rest of
  the source file was just left uninstrumented.

- Bug fix: Made ctc more robust. ctc crashed, if certain configuration
  parameter definitions (DIALECT_C, DIALECT_CXX, TYPE, TICK) were missing
  altogether in the configuration file.

- Bug fix: In situations where ctc needs to generate a temporary response
  file (if the command emitted by ctc is about to grow too long), it is
  now able to insert a space character between the option and the response
  file name, if the separating space is mandatory and proper definitions
  (OPTFILE, PARAMS_SEPARATE) can be found in the configuration file. See
  the CTC++ User's Guide for more information.

- Bug fix: Certain complicated compiler/linker response file cases are now
  better handled. For example, with proper definitions (OPTFILE, PARAMS)
  in the configuration file, the following case (the Diab compiler) can
  now be handled correctly

     ctc ... dcc ... -@responsefile ... -@E=errorlogfile ...

  Previously -@E=errorlogfile was handled erroneously. See the CTC++
  User's Guide for more information.

- Bug fix: There is no longer any fixed limit for the length of the full
  original compilation command (including all options and all file names)
  that is passed to an optional user-defined instrumentation step (if
  the environment variable CTC_AFTER_CPP and/or CTC_AFTER_INSTR and/or
  CTC_AFTER_COMP is set). Previously, a long command was truncated to
  ca. 4096 characters. Furthermore, the user-defined command and each
  argument is surrounded by quotes, when needed (contains a space
  character for example).

- Bug fix: (Windows only) Now the following type of relative path to a
  symbolfile (drive but no directory) is handled correctly

      ctc ... -n D:filename.sym ...

  Previously this resulted later in a run-time error when running the
  instrumented target, because the datafile's name converted to an
  absolute form (from the symbolfile name) was erroneous.

- Bug fix: Corrected an error message, which could be given in certain
  special cases, and where it was unfoundedly claimed that linking had
  failed while it was in fact compilation (of a non-instrumented source
  file, for example) that had failed.

- Bug fix: When ctc sees a command like

     ctc possible_ctc_options command

  (i.e. the compile or link 'command' has no arguments), ctc just
  executes the 'command'. (Some build systems can emit plain 'command's
  to query the compiler version or some such). Previously ctc proceeded
  and tried to link the CTC++ run-time library into the "target".

- Bug fix: (Mostly a Windows issue) Concerning timing instrumentation,
  enhanced ctc.h so that all calling conventions are now possible.
  Usually nothing additional needs to be done, unless the timer function
  (cost function) uses a non-default calling convention (see ctc.h about
  the usage of the CTC_TIMER_API macro)


In CTC++ runtime library:

- Change: Datafile (and symbolfile) locking scheme no more uses the
  environment variable CTC_NO_LOCKING. Instead, the environment variable
  CTC_LOCK_MAX_WAIT is now used. If it has the value 0, the behavior is
  the same as it was with CTC_NO_LOCKING. Additionally, a user-definable
  maximum lock-waiting time (in seconds) can be specified by setting a
  value greater than 0. The default is 60 seconds, as before, if
  CTC_LOCK_MAX_WAIT is not defined.


In CTC++ postprocessor (ctcpost):

- Change: Changed the -f option handling. Now it is no more required that
  the file that is specified in the -f option must also be found from
  the symbolfile. Also the option argument can be a wildcard notation
  specifying the files on which the listing is produced. An example:

     ctcpost ... -p profile.txt -f "*\Dir1\*" -f "G:\Work\*" -f xfile.c


In CTC++ to HTML converter (ctc2html):

- Change: Based of the file names in the input profile listing the HTML
  form report is generated in sorted order, by directories, by files.

- New: Directory level TER% is calculated.

- New: New top-level page "CTC++ Coverage Report - Directory Summary".

- Change: When generating certain HTML pages they are splitted when
  directory changes. The sub-pages are next/previous linked. The new
  arrangement avoids generation of gigantic HTML pages, when very many
  directories and file are involved.

- New: Introduced Index frame (invokable by a link) also on the
  "CTC++ Coverage Report - Functions Summary" page.

- New: Option -li number introduced. It can be used to limit the Index
  frame size at "CTC++ Coverage Report - Execution Profile" pages.
  (In gigantic cases the Index frame size could become a problem...)


In CTC++/Windows delivery package:

- New: Introduced CTC++ Visual Studio 2005 IDE integration. It's a clone
  of the integration for Visual Studio .NET 2003, but adjusted for VS 2005.
  Read more from %CTCHOME%\Vs2005\*.

- Updated: CTC++ Visual Studio .NET 2003 IDE integration: Some documentary
  type of texts updated. ctcmode on/off script enhanced. Read more from
  %CTCHOME%\Vsnet\*.

- Updated: CTC++ Visual Studio 5.0/6.0 IDE integration: Some documentary
  type of texts updated. One bug fix when '/' directory separators were
  used. Read more from %CTCHOME%\Devstud\*.

- Updated: CTC++ CodeWarrior Integration. One bug corrected when
  CodeWarrior v2.8/3.0 was used, a special case. Read more from
  %CTCHOME%\Sym_cw\*.


In CTC++/Linux, /Solaris, /HPUX delivery packages:

- New: Introduced 'ctcwrap -- CTC++ Wrapper for Unix' utility. It
  facilitates a simple way to do a makefile-based "ctc builds" in Unixes.
  An example:

     ctcwrap -i m -v make -f mymakefile.mak

  where all emitted compile/link commands are prepended with "ctc -i m -v".


General:

- CTC++ User's Guide upgraded to v6.3 level.


Version 6.2.2  (22 May 2006)
----------------------------

This revision 6.2.2 of CTC++ is a bug fix version over CTC++ 6.2(.1).
In this revision effectively only the preprocessor component has changed.

    Preprocessor               6.2.2 (was 6.2.1, seen with the -h option)

All the other CTC++ subcomponents are unchanged from the v6.2 or v6.2.1
level (see below the sections "Version 6.2" and "Version 6.2.1" for
details).

The corrections and enhancements in this version are the following:

- Fixed a bug pertaining to multicondition coverage instrumentation. With
  certain kind of "complicated" conditions, especially if they contained
  ternary ?: operators, it could happen that an uninitialized variable
  was used, resulting, e.g., in bad (non-compilable) instrumentation. For
  example, the bug could show up in the following kind of situation,

     if ((((!a || b) && c) != ((d == e) ? 0 : 1))) { ...

  This bug has been in the tool since version v6.1.1. However, the bug was
  quite rare and did not occur at all, if multicondition instrumentation
  (-i m) was not used.

- Fixed a bug regarding the special value %DEFAULT% and the configuration
  parameters EXT_C and EXT_CXX. This value, %DEFAULT% had no effect
  whatsoever, if used in EXT_C or EXT_CXX. (It was handled correctly only
  when used in EXT_OTHER.) For example,

      ctc -i m -C EXT_C=%DEFAULT% gcc -xc -c foo.bar foobar

  Now the value %DEFAULT% matches any filename extension (including also
  the "no extension at all" case), and ctc accepts here the files foo.bar
  and foobar as C source files and instruments them accordingly.

- Increased the length of a buffer used for passing the full original
  compilation command (including all options and all file names) to the
  optional user-defined instrumentation phases (activatable by setting
  the environment variables CTC_AFTER_CPP and/or CTC_AFTER_INSTR and/or
  CTC_AFTER_COMP.) Now the length can be 4096 characters. Previously, a
  long command was truncated to ca. 1024 characters.


Version 6.2.1  (27 April 2006)
------------------------------

This revision 6.2.1 of CTC++ is a bug fix version over CTC++ 6.2. Mostly,
the corrections are related to the handling of some extreme-situation GCC
extensions. In this revision effectively only the preprocessor component
and the configuration file have changed.

    Preprocessor               6.2.1 (was 6.2, seen with the -h option)
    Configuration file ctc.ini 6.2.1 (was 6.2, seen in the ctc.ini header)

All the other CTC++ subcomponents are unchanged from v6.2 level (see
below the section "Version 6.2" for details).


The corrections and enhancements in this version are the following:

- Fixed a bug in handling of parentheses ...(...)... at the command line.
  This was a problem with Unix shells. For example,

      ctc -i m gcc -c "-DFUNC=foo(5)" ...

  Now, when ctc emits a C/C++ preprocessing, compiling or linking command,
  the quotes are preserved around any command-line arguments that include
  parentheses.

- Fixed a bug regarding certain kind of template function instantiations
  having a constant ternary expression (?:) between angle brackets <...>.
  For example,

      ... templ_func_name <M ? 16 : 32> (arguments) ...

  Previously, such an expression was instrumented which resulted in a
  non-constant expression and non-compilable code.

- Fixed a GCC-extension related bug which caused ctc to crash, when the
  following conditions occurred simultaneously: there was a statement
  block inside an expression ...({...})..., and this block contained an
  if/while/for/switch statement, and this block was followed by a ternary
  operator (?:). For example,

      ... ({if(cond) ... }) ... ? 10 : 20 ...

- Fixed a GCC-extension related bug in instrumenting a ternary expression
  (?:) where the middle operand was omitted. For example,

      ... expr1 ? : expr3 ...

  Previously, when the expression was instrumented and expr1 evaluated
  to non-zero (true), the overall result was always 1, while it should
  have been the value of expr1.

  Now this GCC extension is not instrumented at all. This policy was
  already stated at version 5.0.5, but was "forgotten" in this case.

- Changed the handling of certain kind of GCC extensions, viz. blocks
  ({...}) inside if/while/do-while/for statements and containing ternary
  expressions (?:). For example,

     ... if( a > ({... + expr ? 10 : 20 + ...}) ) ...

  Now, as this is a GCC extension, the code inside the block ({...}) is
  not instrumented at all.

- Fixed a GCC-extension related bug in certain kind of special use of
  braces. For example,

      struct S { int m; };
      ...
      ... foo(((struct S){.m = 5})) ...     // error

  The bug caused unpredictable behavior at instrumentation, for example,
  the instrumented code could be non-compilable.

- Minor addition to the ctc.ini file (in all delivery packages: Windows,
  Linux, Solaris, HPUX): the OPT_NO_COMPILE list of gcc and g++ command
  blocks now includes the option "-Wp," (to avoid certain problems, if
  applied when compiling the instrumented file).

- Made the tool components (preprocessor, run-time, postprocessor) more
  tolerable to FLEXlm floating licensing run-time problems. Now, if the
  license check-out from the license pool fails, it will be re-tried 3
  times before giving up and aborting the tool run. This has been found
  to circumvent some problems, if there is heavy network traffic.

  Actually, this FLEXlm change was made already in CTC++ v6.2, but was
  forgotten to mention in its version.txt.

  Note: Windows users, see the FLEXlm documentation for more information
  about the FLEXLM_BATCH environment variable and the FLEXlm License
  Finder.


Version 6.2  (31 March 2006)
----------------------------

This revision 6.2 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.2  (was 6.1.1, seen with the -h option)
    Run-time libraries         6.2  (was 6.1, seen by the 'ident'
                                    command applied on the library
                                    in some environments)
    Postprocessor              6.2  (was 6.1.1, seen with the -h option
                                    and in the listings)
    Header file ctc.h          6.2  (was 6.1.1, seen in the ctc.h comments)
    Configuration file ctc.ini 6.2  (was 6.1.1, seen in the ctc.ini header)
    CTC++ to HTML Converter    2.0  (was 1.11, seen with the -h option)
    CTC++ to Excel Converter   1.1  (was 1.0, seen with the -h option)
    CTC++ Merger utility       1.0  (unchanged, seen with the -H option
                                    and in the merged listings)

and the following version numbers in its Windows platform specific
components:

    Visual Studio .NET Integration 2.2 (was 2.1, seen by clicking the
                                       Tw-icon in the CTC++ dialog boxes
                                       and selecting "About CTC++/VSI...",
                                       and in vsnet\version.txt)
    Visual Studio 5/6 Integration  2.1 (unchanged, although some documentary
                                       fixes, seen by clicking the TW-icon
                                       in the CTC++ dialog boxes and
                                       selecting  "About CTCui...")
    CodeWarrior Integration        1.3 (was 1.2, seen in sym_cw\version.txt)

The corrections and enhancements in this version are the following:

- Introduced a locking scheme to protect the symbolfiles against corruption.
  Possible parallel updates are serialised. The new arrangement facilitates
  parallel "ctc builds", for example in a Linux farm context. Also the
  datafiles are similarly protected against parallel updates. If desired,
  locking can be prevented, and revert back to the old non-locking behavior
  by setting the environment variable CTC_NO_LOCKING. See the CTC++ User's
  Guide for more information.

- The handling of the symbolfile (a.k.a counter description file) by
  the CTC++ preprocessor has been internally rearchitectured. Now, the
  symbolfile is more robust against corruption. Also, its handling is
  significantly faster, especially in re-instrumentations and with big
  volumes (many files, big files).

- The handling of the datafile by the CTC++ run-time has been internally
  rearchitectured. Updating an existing datafile is faster in many cases.

- Fixed a bug regarding struct and union templates. The preprocessor did
  not recognize them correctly (unlike class templates), and in certain
  cases this could cause various bad instrumentations. For example, a
  constant ternary expression (?:) could be instrumented making it
  non-constant and resulting in non-compilable code. For example,

     template <typename T, int i> struct Buffer { ... };
     ...
     return ToInt(Buffer<int, SHORT ? 128 : 256>());   

- Fixed a bug regarding certain kind of type-name declarations having
  constant ternary expressions (?:) in brackets. Previously, such ?:
  expressions were instrumented which resulted in non-constant expressions
  and non-compilable code. For example,

      ... (int (*)[M ? 1 : 2]) (expr) ...

- Fixed a bug regarding certain kind of template function specializations.
  Such functions were not instrumented at all, if the template arguments
  were explicitly specified between angle brackets after the template
  function name. Also not instrumented, if there was empty angle brackets,
  <> after the template function name. For example,

        // primary template, instrumented OK:
     template <class T> bool gt (T a, T b) { ... }
        // specializations that were not instrumented:
     template<> bool gt <const char*> (const char* a, const char* b) { ... }
     template<> bool gt <> (const char* a, const char* b) { ... }
        // specialization that was instrumented:
     template<> bool gt (const char* a, const char* b) { ... }

- Fixed a bug regarding typedef declarations. The preprocessor did not
  handle correctly typedefs for template instantiations. In certain cases
  this could cause unpleasant symptoms, e.g. a declaration in condition
  could be instrumented in a wrong way, and the instrumented code could
  be non-compilable. For example,

     template <class T> class C { ... };
     typedef C<float> CF;
     ...
     if (CF x(f)) ...	

- The preprocessor now checks that the wildcard characters ? and * are
  not used in the EXCLUDE / NO_EXCLUDE configuration parameters in a way
  not supported by CTC++. An error message is given, if these wildcard
  characters are used in a non-supported way. Previously, they were
  silently ignored, having no effect whatsoever.

  Using the ? character is not allowed at all. As for the * character,
  at most one * is allowed per directory or file name (with the exception
  of the special *.* pattern). For example,

     *x*.cpp                          // error
     Z:\proj\sources\common\msg.in?   // error
     Z:\proj\sources\common\*x*z.inc  // error
     Z:\proj\sources\common\a*t.inl   // OK
     /opt/*/*/com*/*.*                // OK

- Fixed a couple of bugs in the preprocessor causing in certain cases
  wrong line numbers to be shown in profile, HTML, and other listings.

- Fixed a minor bug in the preprocessor, although harmless in practice.
  Now each instrumented file is given a unique timestamp. Previously, all
  files that were instrumented with the same ctc command got the same
  timestamp.

- Changed how differently written filenames (on the command line) are
  treated by the CTC++ preprocessor. Previously, the filenames were
  taken to mean the same file, if their names after having changed to
  absolute were the same. And it was the latest variant seen that was
  saved in the symbolfile. This was ill-considered as there is no similar
  behavior at run time, when the file's counters are saved/appended to
  the datafile.

  Now, for example, if the current working directory is Z:\proj\sources
  the following files are considered different at instrumentation time
  (previously they were taken to be the same)

     msgview.cpp
     .\msgview.cpp
     Z:\proj\sources\common\msgview.cpp
     \proj\sources\common\msgview.cpp

  Note, however, that on Windows the lower case/upper case difference
  does not make the file names different.

- Fixed a bug, where in certain special cases, a token from the end of
  the preceding line could come to the beginning of the next line in the
  instrumented file. If the next line was a preprocessing directive, the
  instrumented file did not compile.

  Normally CTC++ processes C-preprocessed code, which no more contains
  preprocessing directives (other than #line and #pragma, which were
  already handled properly). However, with some compiler options also
  other preprocessing directives might remain in CTC++'s input, or when
  the so-called "instrumenting without C-preprocessing" style is tried.

- Fixed a minor bug in the CTC++ run-time library. At the end, even after
  having reported a CTC++ error causing immediate termination, it was
  anyway tried to write the collected counter data to the datafile(s).
  This was a bug on Windows platform only.

- CTC++ to HTML Converter (ctc2html): 
  -- This component is fully rearchitectured. Now the HTML report is 
     shown in one hierarchical window (previously in two, and both had
     two frames). Now also the detailed execution counters information
     and the source code is shown as "merged" in one window.
  -- It is no more required that pop-ups and JavaScripts were enabled in
     the browser.
  -- The generated HTML now passes the W3C Markup Validation Service tests.

- CTC++ to Excel Converter (ctc2excel):
  -- Fixed a minor bug. Now this Perl script does not cause any warnings
     anymore, if it is run with a pedantic option (-w).

- CTC++/Visual Studio 5.0/6.0 Integration kit (distributed only with
  the CTC++/Windows delivery package):
  -- Documented how CTC++ can be used from the command line along with
     the 'msdev' command.
  -- Read more from the %CTCHOME%\Devstud subdirectory.

- CTC++/Visual Studio .NET 2003 Integration kit (distributed only with
  the CTC++/Windows delivery package):
  -- Minor enhancements
  -- Documented how CTC++ can be used with Visual Studio 2005 (a.k.a.
     Visual Studio .NET 2005) IDE
  -- Read more from the %CTCHOME%\Vsnet subdirectory.

- CTC++/CodeWarrior Integration kit (distributed only with the
  CTC++/Windows delivery package):
  -- Enhanced the integration to work also with the new CodeWarrior v3.1
     compiler level. Also the old CodeWarrior v2.8/v3.0 remains supported
  -- Read more from the %CTCHOME%\Sym_cw subdirectory.

- Worked around the "undefined reference to __ctype_b" error on Linux
  platform when linking against the static library libctc.a. This problem
  was encountered on some newer Linuxes, for example, Red Hat 9, Fedora.

- Fine-tuned the and HP-UX cc/aCC and gcc/g++ options in the ctc.ini
  configuration files (in related delivery packages).

- CTC++ User's Guide is upgraded to version 6.2 level (available in PDF
  format in the delivery package, in the doc subdirectory of the CTC++
  installation directory).


Version 6.1.1  (25 August 2005)
-------------------------------

This revision 6.1.1 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.1.1 (was 6.1, seen with the -h option)
    Run-time libraries         6.1   (unchanged, seen by the 'ident'
                                     command applied on the library
                                     in some environments)
    Postprocessor              6.1.1 (was 6.1, seen with the -h option and
                                     in the listings)
    Header file ctc.h          6.1.1 (was 6.1, seen in the ctc.h comments)
    Configuration file ctc.ini 6.1.1 (was 6.1, seen in the ctc.ini header)
    CTC++ to HTML Converter    1.11  (unchanged, seen with the -h option)
    CTC++ to Excel Converter   1.0   (unchanged, seen with the -h option)
    CTC++ Merger utility       1.0   (unchanged, seen with the -H option
                                     and in the merged listing)

and the following version numbers in its Windows platform specific
components:

    Visual Studio .NET Integration 2.1 (was 2.0, seen by clicking the
                                       Tw-icon in the CTC++ dialog boxes
                                       and selecting "About CTC++/VSI...",
                                       and in vsnet\version.txt)
    Visual Studio 5/6 Integration  2.1 (unchanged, seen by clicking the
                                       Tw-icon in the CTC++ dialog boxes
                                       and selecting  "About CTCui...")
    CodeWarrior Integration        1.2 (unchanged, seen in sym_cw\version.txt)

The corrections and enhancements in this version are the following:

- Introduced the constructs '"CTC SKIP";' and '"CTC ENDSKIP";' as
  alternatives to '#pragma CTC SKIP' and '#pragma CTC ENDSKIP' directives.
  These string statements can be used inside macro definition bodies,
  where #pragmas cannot be used. For example,

     #define ASSERT(c) "CTC SKIP"; \
                       if(!(c)){ ... } \
                       "CTC ENDSKIP";

- Enhanced the instrumentation of the ternary ?: operators. Now, they
  are instrumented also inside the conditions of if, while, do-while and
  for statements.

- Fixed a bug regarding the ternary ?: operator instrumentation. Constant
  ?: expressions used as template arguments were instrumented in certain
  contexts, viz. inside the expressions of return, throw, switch and for
  statements, resulting in non-compilable instrumented code. For example,

        return ToInt(Buffer<int, SHORT ? 128 : 256>());

  A similar bug was fixed already in CTC++ v6.1, but the fix was only
  partial and did not work in these contexts.

- Fixed a bug when handling certain kind of C++ (but not C) typedefs. If
  a typedef declaration defined two (or more) synonyms for some class,
  struct, or union type, and the second (third, ...) synonym was used in
  a qualified name in front of the :: operator, this could cause the CTC++
  preprocessor to crash. For example,

     typedef A  B, C, D;  // A is a class, struct, or union
     ... B::memb ...      // usually OK
     ... C::memb ...      // probably a CTC++ crash

- Fixed two asm bugs, either of which could yield unpredictable results
  (including a CTC++ preprocessor crash):
  -- In case of the Microsoft and Borland dialects, a buffer overflow
     could occur, if there were long __asm lines in the source file.
  -- In case of GCC, the CTC++ preprocessor did not correctly recognize
     the __asm keyword. (However, asm and __asm__ were recognized.)

- In the CTC++ postprocessor (ctcpost), it is now possible to generate
  profile, untested, summary and timing listings from the symbolfile
  information only. Previously, at least one datafile was mandatory.
  For example,

     ctcpost -p -            # MON.sym mandatory, MON.dat used if found
     ctcpost -s - projx.*    # projx.sym mandatory, projx.dat used if found
     ctcpost -t - projy.sym  # projy.dat used if found (not mandatory)

  As before, if no (or out-of-date) counter data for a source file is
  available, the counters for the source file are shown as zeros.

- An enhancement and a bug fix in the CTC++ / Microsoft Visual Studio
  .NET Integration kit. See its own version.txt in the %CTCHOME%\vsnet
  subdirectory (distributed only with the CTC++/Windows delivery package).

- A bug fix in the CTC++ / Microsoft Visual Studio 5.0/6.0 Integration
  kit. See its own version.txt in the %CTCHOME%\devstud subdirectory
  (distributed only with the CTC++/Windows delivery package).

- CTC++ User's Guide is upgraded to version 6.1.1 level (available in PDF
  format in the delivery package, in the doc subdirectory of the CTC++
  installation directory).


Version 6.1  (20 April 2005)
----------------------------

This revision 6.1 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.1  (was 6.0, seen on the screen)
    Run-time libraries         6.1  (was 6.0, seen by the 'ident' command
                                    applied on the library in some
                                    environments)
    Postprocessor              6.1  (was 6.0, seen on the screen and
                                    in the listings)
    Header file ctc.h          6.1  (was 6.0, seen in the ctc.h comments)
    Configuration file ctc.ini 6.1  (was 6.0, seen in the ctc.ini header)
    CTC++ to HTML Converter    1.11 (was 1.10, seen with the -h option)
    CTC++ to Excel Converter   1.0  (new, seen with the -h option)
    CTC++ Merger utility       1.0  (unchanged, seen with the -V option)

and the following version numbers in its Windows platform specific
components:

    Visual Studio 5/6 Integration  2.1 (was 2.0, seen by clicking the
                                       Tw-icon in the CTC++ dialog boxes
                                       and selecting  "About CTCui...")
    Visual Studio .NET Integration 2.0 (new, seen by clicking the
                                       Tw-icon in the CTC++ dialog boxes
                                       and selecting "About CTC++/VSI...",
                                       and in vsnet\version.txt)
    CodeWarrior Integration        1.2 (new, seen in sym_cw\version.txt)

The corrections and enhancements in this version are the following:

- Introduced a new utility ctc2excel. It generates a TSV (tab separated
  values) file from an Execute Profile Listing produced by ctcpost. This
  TSV file can be imported directly into Excel or another spreadsheet
  application. See the CTC++ User's Guide for more information.

- On Windows platform, introduced the CTC++/Visual Studio .NET Integration
  Kit, new 2.0 version. It is now packaged into the basic CTC++/Windows
  delivery, while the previous v1.x integration kit was a separate
  deliverable.

  The new CTC++/Visual Studio .NET Integration v2.0 has a GUI for using
  CTC++ via the Visual Studio .NET IDE. Also, the previous v1.x usage
  style by setting "CTC++ mode" ON and OFF can still be used.

  Note that there are now two Visual Studio integration kits in the CTC++/
  Windows delivery package, one for Visual Studio 6.0 (also 5.0) and the
  other for Visual Studio .NET 2003. The older kit has been available for
  years (as of CTC++ v4.1.x in 1996, reworked for CTC++ v5.0.x in 2000) and
  can still be used. The new kit for VS .NET was first introduced in August
  2004. These integration kits are independent of each other and can even
  be used simultaneously on the same computer if needed (provided that both
  VS 6.0 (or 5.0) and VS .NET are installed).

  See %ctchome%\vsnet\ctcvsug.txt and %ctchome%\vsnet\version.txt for more
  information.

- On Windows platform, introduced the CTC++/Metrowerks CodeWarrior
  Integration Kit, new 1.2 version. It is now packaged into the basic
  CTC++ Windows delivery. The previous v1.x integration kits were separate
  deliverables. This integration kit is for use with the Symbian EPOC
  emulator running on Windows.

  See %ctchome%\sym_cw\ctccwug.txt and %ctchome%\sym_cw\version.txt for
  more information.

- Introduced two new configuration parameters PARAMS_LIST and
  PARAMS_LIST_SEPARATOR. With these parameters CTC++ is informed about
  compiler and linker options taking a list of parameters (one or more),
  and what is the separator character (if any) in the list.

  For example, having the following settings for the Metrowerks CodeWarrior
  compiler (mwccsym2),

     PARAMS_LIST = -warnings,-warn,-w,-sym
     PARAMS_LIST_SEPARATOR = ,

  the CTC++ preprocessor can now parse this command line correctly:

     ctc ... mwccsym2 -c ... -w nohidevirtual, nounusedexpr foo.cpp

- Added support for digraphs <%, %>, <:, :>, and %: (for {, }, [, ], and
  # respectively).

- The preprocessor now recognizes correctly the alternative keywords
  supported by C++: and (for &&), and_eq (&=), bitand (&), bitor (|),
  compl (~), not (!), not_eq (!=), or (||), or_eq (|=), xor (^), and
  xor_eq (^=)

- Fixed three bugs regarding the ternary ?: operator instrumentation,
  each of which resulted in non-compilable code.

  -- Certain kind of nested ternary operators such as

        expr1 ? expr2 ? expr3 : expr4 : expr5

  -- Certain kind of expressions before the question mark containing
     commas (,) between angle brackets, for example,

        static_cast< T<X, Y> >(expr) ? expr2 : expr3

  -- Constant expressions used as template arguments, for example,

        Buffer<int, SHORT ? 128 : 256> ibuf;

- Fixed two bugs regarding "declaration in condition" instrumentation.
  In certain cases CTC++ did not correctly recognize that a condition was
  a declaration and produced non-compilable code.

  -- If the type at the beginning of the declaration was a class type and
     there was no explicit assignment operator, e.g.,

        if (L x)          // was bug in CTC++
        if (L x(i))       // was bug in CTC++
        if (L x = i)      // was handled OK by CTC++

  -- If the type at the beginning of the declaration was an instantiation
     of a class template, e.g.,

        if (T<C> x = i)   // was bug in CTC++

- Fixed a bug which caused the preprocessor to crash if there was a lone
     #pragma
  i.e., not a single token following '#pragma' (on the same line).

- Fixed a bug regarding line-continuation characters (escaped newlines)
  outside preprocessing directives. Such characters were not correctly
  recognized, and this could cause various symptoms, for example, the
  compiler or CTC++ itself could report syntax errors.

  In practice, this bug caused problems only with Visual C++ 7.0 and 7.1
  compilers, whose preprocessor output differs slightly from the older
  vC++ compilers' (5.0 and 6.0) preprocessor output (which CTC++ is able
  to cope with). In other compilers' preprocessor output there seem to be
  no such characters left at all. In any case, the bug had no effect for
  #defines and other preprocessing directives.

- Fixed a bug in the preprocessor regarding quotes and the '<' and '>'
  characters at the command line. For example, the following command,

      ctc ... cl ... -D "STREAM=<sstream>" ... somefile.cpp

  caused previously an error, because the quotes were missing in the CTC++
  emitted C/C++ preprocessing command.

- Added support for nested response files (options files, command files).
  This enhancement applies both to CTC++ preprocessor and postprocessor
  response files, as well as to compiler and linker response files (if
  the compiler or linker supports them, cf. the OPTFILE configuration
  parameter). For example, given the command

      ctc ... @file.rsp ... cl ...

  the file 'file.rsp' may now contain (among other options) @file2.rsp.

- Fixed several bugs related to response files.

  -- Newlines were not recognized as separators. Instead, they were
     silently "eaten away". For example, two options with only a newline
     separating them were concatenated.

  -- Quotation marks (") were recognized and handled correctly only if an
     option, file name, etc. was entirely enclosed between the quotes.
     "Embedded" quotes are now recognized correctly, for example,

        -DHELLO="Hello world"
        /Fo"D:\My Documents\foo.obj"
        /Fo"D:\My Documents"\foo.obj
        /Fo"My Documents\\"

  -- Escaped quotes are now recognized and handled correctly. For example,

        -DHELLO=\"Hi!\"
        -D "STREAM=\"mystream.h\""

  -- The characters '<' and '>' are now correctly recognized and handled
     correctly. For example,

        -D STREAM=<sstream>

- Fixed a bug pertaining to the optional user-defined instrumentation
  phases (activated by setting the environment variables CTC_AFTER_CPP,
  CTC_AFTER_INSTR and CTC_AFTER_COMP). The full original compilation
  command (including all options and all file names) is re-added to the
  parameterization of these additional phases. The first time it was
  added in CTC++ v5.2 but was inadvertently omitted in v6.0; only the
  three original parameters (as of v5.0.10) survived intact. Notably,
  the Symbian/WINS command-line tool ctc-abld-wins.bat (old name
  ctc-abld-host.bat) needs this additional information.

- The preprocessor now recognizes S-prefixed string literals, (a Microsoft
  managed extension in Visual C++ .NET), for example, S"Hello world"

- A minor enhancement related to the EMBED_FUNCTION_NAME configuration
  parameter. For a function or functions specified in EMBED_FUNCTION_NAME,
  the coverage data is written out at the function end and at return/throw
  statements. Now this data includes the incrementation of the end counter
  or return/throw counter itself. Previously, the data was written out
  before the incrementing was performed, and these incrementations could
  be lost, if there was no later write-out.

- A minor improvement related to the symbol files of CTC++. A symbol file
  is no longer created or updated, if it is not really needed. A linker
  command never creates or updates a symbol file. A compiler command
  creates or updates a symbol file only if an instrumented source file
  is compiled. For example, a linker command run in a different directory
  than the compiler command(s) created previously an unnecessary and
  almost empty symbol file (having only the start and end "stamps").

- The CTC++ preprocessor, run-time library and postprocessor now support
  much longer error messages than before. This is especially useful in
  situations where there are FLEXlm licensing problems; further details
  about the problem can now be given.

- Fixed a couple of bugs in timing instrumentation. In certain cases, the
  time spent in a function was calculated incorrectly at catch and throw
  statements.

- Fixed a bug pertaining to negative timer values in both the CTC++
  run-time library and in the postprocessor. Although the type of timer
  values is (usually) signed (cf. time_t in <time.h>), negative values
  were not always calculated or shown correctly. For example, the value
  2147483647 could appear in a timing listing where a negative value
  should have been shown.

- In the Timing Listings generated by ctcpost, the timer description (i.e.,
  the function name) is never truncated. Previously, a long function name
  was truncated to ca. 35 characters.

- Added source file name and line number to some error and warning messages
  of the CTC++ preprocessor

- Relaxed the rule that prevented from using the pragmas CTC SKIP and
  CTC ENDSKIP inside function bodies. However, a warning is still given,
  because using them incorrectly may result in non-compilable instrumented
  code. See the CTC++ User's Guide for more information.

- On Linux and Unix platforms, ctcpost now tolerates Windows-style newlines
  CRLF in CTC++ symbolfiles

- Fixed a bug in the ctc2html utility related to function coverage. The
  functions were missing in the second frame (Files / Functions Section)
  -- if the source file was instrumented using the preprocessor's -i ft
     option (function coverage AND timing instrumentation)
  -- if a higher multicondition or decision coverage was reduced to
     function coverage using ctcpost's -ff option

- On Windows platform, the Symbian/WINS (emulator) command-line tool
  ctc-abld-host.bat is renamed to ctc-abld-wins.bat, and the subdirectory
  %ctchome%\symbhost is renamed to %ctchome%\sym_vc6.

- A couple of bug fixes in the CTC++ / Microsoft Visual Studio 5.0/6.0
  Integration kit. See its own version.txt in the %CTCHOME%\devstud
  subdirectory (distributed only with the CTC++/Windows delivery package).

- Fine-tuned the Visual C++, and gcc/g++ and Sun cc/CC options in the
  ctc.ini configuration files (in related delivery packages).

- CTC++ User's Guide is upgraded to version 6.1 level (available in PDF
  format in the delivery package, in the doc subdirectory of the CTC++
  installation directory)


Version 6.0  (7 July 2004)
--------------------------

This revision 6.0 of CTC++ has the following version numbers in its
components:

    Preprocessor               6.0  (was 5.2.1, seen on the screen)
    Run-time libraries         6.0  (was 5.2.1, seen by the 'ident' command 
                                    applied on the library in some
                                    environments)
    Postprocessor              6.0  (was 5.2.1, seen on the screen and
                                    in the listings)
    Header file ctc.h          6.0  (was 5.2.1, seen in the ctc.h comments)
    Configuration file ctc.ini 6.0  (was 5.2.1, seen in the ctc.ini header)
    CTC++ to HTML Converter    1.10 (was 1.9, seen with the -h option)
    CTC++ Merger utility       1.0  (unchanged, seen with the -V option)
    Visual Studio Integration  2.0  (unchanged, seen by clicking the
                                    Tw-icon in the CTC++ dialog boxes
                                    and selecting  "About CTCui...",
                                    included in the Windows version only)

The corrections and enhancements in this version are the following:

- Enhanced CTC++ to instrument also the conditional expressions written
  with the ternary operator "? :". For the expression

     expr1 ? expr2 : expr3

  it is counted how many times the expression evaluates to true and how
  many times to false. The expression is instrumented and shown in the
  listings similarly to decision coverage, for example as follows

      START/       END/
        TRUE      FALSE    LINE DESCRIPTION
  ================================================
         ...        ...     ... ...
           3          0 -    21 ternary-?: expr1

  If desired, the ?: instrumentation can be prevented by defining the
  macro CTC_COND_OPER_NO_INSTR, e.g., adding it to the OPT_ADD_COMPILE
  configuration parameter.

- Introduced a new configuration parameter SKIP_FUNCTION_NAME. The given
  functions are left uninstrumented as if they were enclosed between the
  pragmas CTC SKIP and CTC ENDSKIP. For example,

     ctc -C SKIP_FUNCTION_NAME=main,foo,Debug::Print gcc *.cc

- The preprocessor recognizes now correctly the C99 hexadecimal floating
  constants, e.g., 0X1P-23, 0x12.34p-12, 0x1.FFFFFEp128f

- Fixed a bug in handling case expressions. The CTC++ preprocessor
  produced non-compilable code if the constant expression contained a
  colon. For example, "case MACROVALUE ? 10 : 20 : ...".

  The previous bug fix (CTC++ v5.2.1) worked only in cases where the
  expression containing ':' was enclosed between parentheses, e.g.,
  "case (MACROVALUE ? 10 : 20): ...".

- Fixed a bug which caused the preprocessor to crash if there was only
  "#pragma CTC", i.e., the name of the CTC pragma was missing. Now,
  an appropriate warning message is given.

- Fixed a bug which caused the preprocessor to leave the rest of the
  source file uninstrumented, if there was a nameless class, struct, or
  union with empty braces. This was a problem with C++ (not C) code
  only. For example,

     typedef class {} empty;

- Corrected a gcc related bug in the ctc.ini configuration file. The bug
  caused C++ source files to be taken as C files if the compiler command 
  was gcc (instead of g++), and this could in certain cases result in
  instrumented files that did not compile. For example,

     ctc -i m gcc -c foo.cc

- Fixed a timing instrumentation problem on Linux and HP-UX. If there was
  "#include <time.h>" (either directly or indirectly) in the source file
  and timing instrumentation (with the option -i t) was selected, the
  instrumented file did not compile. The compilers gave various kind of
  error messages about conflicting profiles of the function clock(), one
  declared in ctc.h and the other in time.h.

  On Linux, this was a problem with C++ source files only. On HP-UX, this
  was a problem both with C and C++, and with all the supported compilers
  (aCC, cc, g++, gcc). The new version of ctc.h resolves this problem.

- Enhanced the technique "instrumenting for function call tracing". Now,
  besides entering an instrumented function, also exiting such a function
  can be traced. The function name is available also at the end of an
  instrumented function, and at each return and throw statement. See the
  file tracer.txt in the 'doc' subdirectory of the installation directory
  for details.

- A minor enhancement related to function coverage and the configuration
  parameter EMBED_FUNCTION_NAME. Now, the coverage data is written to a
  datafile also immediately before each return and throw statement of
  such functions whose names are given in the EMBED_FUNCTION_NAME list.
  Previously, in case of function coverage, the data was saved only if
  the ending brace (}) of such a function was reached.

  Note that in case of decision and multicondition coverage there is no
  change in behavior. However, there was a minor documentation bug. Only
  return, not throw, statements were mentioned.
  
- In the CTC++ postprocessor (ctcpost), introduced a new option -ff 
  (reduce to function coverage), which forces only function coverage to
  be shown in the coverage listings even if the instrumentation was done
  with a stronger decision or multicondition coverage. Re-instrumentation
  and re-run of tests is no more needed for getting the compact/limited
  function coverage view.

- Fixed a bug in the CTC++ to HTML Converter (ctc2html). This bug caused
  ctc2html to crash ("Can't use an undefined value as a symbol reference
  at ...") when encountering a line directive where the file name was all
  in lower case although originally the file name had upper case letter(s).

  This bug could appear only in very special circumstances: On Windows
  the Visual C++ compiler was used with the /ZI option. Further, the name
  of the instrumented file contained upper-case letter(s) and this file
  in turn included some other file which was also instrumented.

- On Windows, now also the CTC++ run-time library correctly recognizes
  a slash (/) as a directory separator (previously, only a backslash (\)
  was recognized). This was a problem if both of the following conditions
  were met
  -- the preprocessor's -n option was used to name the symbol file and 
     the slash (/) was used as a separator, for example,
        ctc -n D:/Work/CTC/ProjectA.sym cl ...
  -- the environment variable CTC_DATA_PATH was set to specify the
     directory of the datafile, for example,
        set CTC_DATA_PATH=T:\CTC

  The net result of these was a run-time error when running the
  instrumented executable (when trying to create T:\CTC\ProjectA.dat).

        CTC++ run-time error 5: Cannot create file ...: Invalid argument

- On Linux and Unix platforms, the Windows style newlines CRLF are now
  tolerated in ctc.ini (and other CTC++ configuration files).

- Now also on Windows, the process id (PID) is used as part of the
  temporary file names created by the CTC++ preprocessor. This works
  around a problem met when using CTC++ on a dual-processor machine.

- Fine-tuned the Visual C++ and gcc/g++ options in the configuration file
  ctc.ini (in related delivery packages).

- A couple of bug fixes and enhancements in the CTC++ / Microsoft Visual
  Studio Integration kit. See its own version.txt in the %CTCHOME%\devstud
  subdirectory (distributed only with CTC++ for Windows XP/2000/NT/98/95).

- On the client tool side, upgraded to the use of FLEXlm 9.2 (was 7.2e).
  Existing Testwell-delivered FLEXlm 7.2e level license servers (lmgrd,
  testwelld) do not need an update because of this. Exception: if your
  license server runs on Solaris 9, ask Testwell for an update to the
  license server.

- CTC++ User's Guide is upgraded to version 6.0 level (available in PDF
  format in the delivery package, in the 'doc' subdirectory of the CTC++
  installation directory)


Version 5.2.1 (15 January 2004)
------------------------------

This revision 5.2.1 of CTC++ has the following version numbers in its
components:

    Preprocessor               5.2.1 (was 5.2, seen on the screen)
    Run-time libraries         5.2.1 (was 5.2, seen by the 'ident' command 
                                     applied on the library in some
                                     environments)
    Postprocessor              5.2.1 (was 5.2, seen on the screen and
                                     in the listings)
    Header file ctc.h          5.2.1 (was 5.2, seen in the ctc.h comments)
    Configuration file ctc.ini 5.2.1 (was 5.2, seen in the ctc.ini header)
    CTC++ to HTML Converter    1.9   (was 1.8, seen with the -h option)
    CTC++ Merger utility       1.0   (unchanged, seen with the -V option)
    Visual Studio Integration  2.0   (unchanged, seen by clicking the
                                     Tw-icon in the CTC++ dialog boxes
                                     and selecting  "About CTCui...",
                                     included in the Windows version only)

The corrections and enhancements in this version are:

- Fixed a bug in the ctc.h file. When using safe counter incrementing
  (i.e., with the macro CTC_SAFE defined), the if, while, do-while and
  for conditions were instrumented incorrectly. This could in many cases
  cause instrumented code that did not compile. However, the code could
  quite often be compilable in spite of the bug, especially if the
  expression was simple enough, for example, if (i > 0)

- In Linux and Unix, the file $HOME/lib/ctc/ctc.ini is added to the list
  of places where configuration files are searched from. Now, if a user-
  specific (not system-wide) default installation is performed, the tool
  runs out-of-the-box without the CTCHOME environment variable being set
  or needing to specify the configuration file in some other way.
 
- Fixed a bug in handling throw expressions in conditional operators (?:).
  The preprocessor produced non-compilable code if throw was AFTER the
  colon. For example,

     pos = size <= MAX_SIZE ? 0 : throw "out of range";   // error

  However, if throw was BEFORE the colon, there was no problem. For example,

     pos = size > MAX_SIZE ? throw "out of range" : 0;    // OK

- Fixed a bug in handling case expressions. The preprocessor produced
  non-compilable code if the constant expression contained a colon. For
  example,

     case (MAC ? 1 : 2):

- Increased the multicondition coverage instrumentation limit (for
  evaluation combinations) from 150 to 270. If this limit is exceeded,
  a "too complex condition" warning is given and the conditional
  expression is instrumented with decision coverage only.

- The preprocessor now detects properly if a for condition contains
  a declaration (possible in C++). For example,

      for (...; int x = f(); ...) ...

  Here, a warning is given and the condition is not instrumented. Both
  the false and true counters in the Execution Profile Listing are shown
  as zeroes. Previously, the instrumented code did not compile at all. 

- Up to version 5.2, all line directives in the instrumented file were
  changed to standard format. This has been found problematic with GCC
  in some, apparently quite rare cases. Now, the preprocessor retains
  the line directives in their original form in the instrumented file.
  For example, the following non-standard directive

     # 256 "/usr/include/stdio.h" 3

  is kept in its original form and is no more transformed to

     #line 256 "/usr/include/stdio.h"

  as older CTC++ versions did.

  Note that the line directives shown in the textual as well as HTML
  listings are still in standard form.

- If only the linking phase fails, this is now shown clearly in the
  error message by the preprocessor. Previously, somewhat misleadingly,
  a compiler or compilation error was reported.

- The run-time library now shows the system error message (generated by
  the strerror function with errno as the argument) at the end of all
  file error messages. For example,

     CTC++ run-time error 5, \
     Cannot create file Y:\Test\MON.dat: Permission denied

  Hopefully, this can help to diagnose the file errors.

- The values of the configuration parameters may now be enclosed in
  quotation marks ("). This is especially useful if the parameter is
  a list and the value itself contains a comma (,). In absence of the
  quotation marks, the comma would be taken as the parameter list
  separator. For example,

     OPT_NO_PREPROC+"-Wp,"

  Note that on the command line the quotation marks must be escaped
  with the backslashes (\) to force the shell to pass them correctly to
  CTC++. For example,

     ctc -i m -C OPT_NO_PREPROC+\"-Wp,\" gcc ...

- CTC++ Postprocessor (ctcpost): the maximum line length in the listings
  is increased from 256 to 1024. The default line length is still 78 which
  can be overridden by the -w option.

- CTC++ to HTML Converter (ctc2html):
  -- Corrected the HTML generated in the third frame (Execution Profile
     Listing). The tags </body> and </html> were not at the end (although
     few, if any, browsers did complain about this).
  -- The version number of the tool is now shown with the -h (help) option

- Fine-tuned the Visual C++, Borland C++, and gcc/g++ options in the
  configuration file ctc.ini (in related delivery packages).

- CTC++ User's Guide is upgraded to version 5.2.1 level (available in PDF
  format in the delivery package, in the doc subdirectory of the CTC++
  installation directory)


Version 5.2 (15 October 2003)
-----------------------------

This revision 5.2 of CTC++ has the following version numbers in its
components:

    Preprocessor               5.2 (was 5.0.10, seen on the screen)
    Run-time libraries         5.2 (seen by the 'ident' command applied
                                   on the library in some environments)
    Postprocessor              5.2 (was 5.0.10, seen on the screen and
                                   in the listings)
    Header file ctc.h          5.2 (was 5.0.10, seen in the ctc.h comments)
    Configuration file ctc.ini 5.2 (was 5.0.10, seen in the ctc.ini header)
    CTC++ to HTML Converter    1.8 (was 1.7, seen in the header of the
                                   Perl script ctc2html[.pl] itself)
    CTC++ Merger utility       1.0 (Initial version, seen with the -V option)
    Visual Studio Integration  2.0 (was 1.2, seen by clicking the Tw-icon 
                                   in the CTC++ dialog boxes and selecting 
                                   "About CTCui...", included in the Windows
                                   version only)

The corrections and enhancements in this version are:

Enhancements, all platforms:
- - - - - - - - - - - - - - -

- Introduced a new utility ctcmerge. If there are two or more places in an 
  Execution Profile Listing containing inclusions of the same instrumented
  code sections (like template code from header files), the coverage data
  of those places can be merged or compressed to one instance only. The
  TER percentages are recalculated correspondingly. See the CTC++ User's
  Guide for more information.

- The ctc2html utility has been upgraded to be able to take the original 
  ctcpost-generated listing or a ctcmerge-generated listing as input. The
  HTML representation shows whether the coverage data is merged or not.

- Introduced a technique "instrumenting for function call tracing", which
  may be helpful in program behavior analysis. See the file tracer.txt in
  the Doc subdirectory of the installation directory for details.

- Introduced an alternate way, how the coverage data areas are allocated at
  run time. Previously, they were always allocated statically inside the
  instrumented file itself. Now they can also be allocated from the heap, 
  when they are needed for the first time. The new heap-based allocation
  scheme prevents the very likely program crash (at the time of writing
  the counter data from the memory to a datafile) in situations where some
  instrumented portions of the program have been removed from memory in
  the meantime. On Windows, a dynamically loaded/freed DLL is an example
  of this. See the CTC++ User's Guide for more information.

  Note: static allocation is still the default with the exception of 
  Windows DLLs where allocation from the heap is the default behavior.

  Note: the CTC++/Host-Target add-on component is not yet extended with
  this "allocate counters from the heap" capability.

- The preprocessor now discards the pressing of Control-C and other normal
  interrupting signals when handling the symbolfile in a critical phase.
  Such an interrupt, if happened at a "bad time", could corrupt the
  symbolfile. (This does not prevent from terminating the preprocessor
  via the Task Manager on Windows or with "kill -9" on Unix, but
  considerable care has to be taken because the symbolfile may corrupt.)
 
- A CTC++ specific macro __CTC__ is predefined when a source file is being
  C/C++ preprocessed. Users can use this as follows in their source files

     #ifdef __CTC__
         /* this file is now CTC++-instrumented... */
         ...
     #endif

  This is especially useful when using CTC++ pragmas to avoid compiler
  warnings about unknown pragmas, for example,
   
     #ifdef __CTC__
     #pragma CTC SKIP
     #endif

- Changed the Timing Listing and some ctc.ini configuration file default 
  settings related to it.

  The default settings in ctc.ini are
  -- TIMER = clock      # execution cost measurement function
  -- TICK = 1           # not scaled in any way in reporting
  -- EXECUTION_COST_TYPE = Clock ticks    # consistent with the above

  The Timing Listings have been made easier to read. Exponential
  representation for the measurements is no more used. The use of 
  decimals is fixed as follows:
  -- EXECUTION COST/TOTAL   column always displayed without decimals
  -- EXECUTION COST/AVERAGE column always displayed with exactly one decimal

- The preprocessor now detects properly if a while condition contains a
  declaration (possible in C++). For example,

      while (int x = f())...

  Here, a warning is given and the condition is not instrumented. Both
  the false and true counters in the Execution Profile Listing are shown
  as zeroes. Previously, the instrumented code did not compile at all. 

  Note that CTC++ still cannot handle properly the case that a for 
  condition contains a declaration, for example,

      for (...; int x = f(); ...)

- Enhanced the parameterization of the optional user-defined additional
  instrumentation phases activated by the CTC_AFTER_CPP, CTC_AFTER_INSTR
  and CTC_AFTER_COMP environment variable arrangements. Previously, the
  only parameters were the compilation command name and two file names.
  Now, these three parameters are followed by the full original compilation
  command, including all options and all file names.

- The argument of the configuration parameter EMBED_FUNCTION_NAME can now
  be a list (previously only one value when not empty). The instrumentation 
  is now more flexible in situations where writing the coverage data to 
  a datafile cannot be based on the atexit() arrangement. For example,

     EMBED_FUNCTION_NAME = E32Dll, E32Main, MyClass::Draw

- The timing instrumentation varies in a certain way depending on whether
  the file is C or C++. With some compilers, the C++ style of timing
  instrumentation has been found problematic (resulting sometimes in a
  run-time crash, probably due to compiler bugs?). Now the C style timing
  instrumentation can be enforced even if the code is C++. For example,

     ctc -i mt -C OPT_ADD_COMPILE+-DCTC_CLIKE_TIMING ... cl ...

  or defining the CTC_CLIKE_TIMING macro permanently in ctc.h. See the
  CTC++ User's Guide for more information.

- Adjusted the timing instrumentation pattern. Now the CTC++ run-time
  libary's global variables ctc_curf_start and ctc_curf_tp are not
  referenced unless they are really needed, i.e., when timing
  instrumentation and the EXCLUSIVE timing mode is selected. These
  references have been found problematic with some compilers (probably
  due to compiler bugs?).

- The so called RCS/SCCS instrumentation stamps (static const variables
  ctc_rcs_stamp and ctc_sccs_stamp) are no more added to the instrumented
  code by default. Because there were no references to them, they could
  cause warnings about unused variables when compiled with certain high
  warning levels. These stamps can still be generated by defining 
  CTC_EMIT_RCS_STAMP and/or CTC_EMIT_SCCS_STAMP during instrumentation.
  For example,

     ctc -C OPT_ADD_COMPILE+-DCTC_EMIT_RCS_STAMP ... cl ...

- The default settings in the ctc.ini configuration files (each platform
  having its own set of supported/preconfigured compilers) have been
  double-checked and fine-tuned to ensure the best possible behavior from
  the very beginning.
  
- The HTML report generated by the ctc2html utility has been fine-tuned
  so that in the top-level Summary frame the filenames are displayed with
  their basenames only (i.e., the possible directories are stripped from 
  the filenames). This makes the HTML report easier to view when there
  are long paths to files - no need to scroll to the right to see the
  basename.

- The CTC++ User's Guide has been upgraded to v5.2 level, available as a
  .pdf file in the delivery package. The .pdf format has also been enhanced
  to support quick navigation (bookmarks).


Bug fixes, all platforms:
- - - - - - - - - - - - -

- The source code, exemplified as follows:

     if (begin_of_condition_expression
     #ifdef SOMETHING
        && end_of_condition_expression
     #endif
     ) ...

  is now handled more robustly, when decision coverage is selected.
  Previously, with some compilers, the instrumented code did not compile.
  This was a problem with decision coverage only, not with multicondition
  (or function) coverage. 

- Pragma directives are now handled correctly. Previously, they could in
  certain cases cause non-compilable instrumented code, exemplified as 
  follows:

     if (...) {
       ...
     }
     #pragma ...

- In certain special cases, partly in relation to the above bugs, a #line
  or #pragma directive in the instrumented file could get some code before
  it on the same line resulting in non-compilable code. The bug is now
  fixed.

- Fixed a bug (generation of non-compilable code), which could occur in
  relation to some 'if' statements when code was #included to the function
  and when the two pertinent files were in separate categories with regard
  to instrumentation EXCLUDE/NO_EXCLUDE setting. For example,

     int main() {
     #include "foo.h"      // By default, .h files are excluded
        return 0;
     }
     ---foo.h:
     if ( ... ) return 1;

- Tab characters inside a response file are now properly handled. For
  example,

     ctc ... cl ... @responsefile.rsp ...

  Previously, an encountered tab character was not correctly recognized
  and could cause various symptoms. For example, it could erroneously be
  interpreted as a file to be compiled. The problem was the same whether
  the response file was the compiler's, linker's or ctc's own, although 
  the symptoms could differ.

- Adding (+) a value to an initially empty configuration parameter list is
  now properly handled. Previously, adding to an empty list had no effect 
  whatsoever, i.e., the list was still empty. For example,

     ctc -C NO_EXCLUDE+specialheader.h ... cl ...

  However, there was no problem when overriding (=) an empty list, for
  example,

     ctc -C NO_EXCLUDE=specialheader.h ... cl ...

- Empty values in configuration parameter lists are now properly handled.
  Previously, they could cause various symptoms depending on the parameter.
  For example,

     ctc -C EXCLUDE+*.hpp,,*.hxx ... cl ...

  Here the adjacent separators (,) produced an empty value in the
  EXCLUDE list and this empty value caused every file to be excluded(!)

- ctcpost: no more generating one extra line feed per report to stdout 
  when producing reports.

- ctc2html: Corrected a problem with "#line" links. The problem was 
  related to certain cases where there were different references (for
  example relative and absolute) to the same file. Now a correct link
  to the HTML'ized source file is always produced.

- ctc2html: Corrected a problem with links when there were spaces in the
  path of the file. Previously, only the characters up to the first space
  were shown in the Summary frame and a couple of other places. However,
  the links worked correctly in spite of this.


Related to the Windows version:
- - - - - - - - - - - - - - - -

- Now, the code under test can be compiled with any calling convention
  (like __stdcall and  __fastcall) supported by the Visual C++ or Borland
  C++ compiler. Previously, only the default __cdecl calling convention
  was supported.

- A number of enhancements in the Visual Studio Integration kit. For
  example, the full command-line option set can now be used also when
  instrumenting via the integration. See %ctchome%\devstud\version.txt
  for more information.

  Note: the current CTC++/Visual Studio integration assumes Visual Studio
  5.0 or 6.0. It does not work with Visual Studio .NET's IDE. In command
  line mode, CTC++ can be used with the VC++.NET (a.k.a VC++ v7.0/7.1)
  compiler.

- Immediate support for building the Symbian WINS (Emulator) projects on
  the command line (using Visual C++). For example, if the original build
  command is "abld build wins udeb", the CTC++ instrumentation phase may be

     ctc-abld-host -i m -- build wins udeb

  As of CTC++ v5.0.9, such Symbian usage has been supported via the
  CTC++/Visual Studio Integration kit. Read more from 
  %ctchome%\doc\symbian.txt


Version 5.0.10 (20 December 2002)
---------------------------------

This revision 5.0.10 of CTC++ has the following version numbers in its
components:

    Preprocessor               5.0.10 (was 5.0.9, seen on the screen)
    Run-time libraries         5.0.10 (seen by the 'ident' command applied
                                      on the library in some environments)
    Postprocessor              5.0.10 (was 5.0.8, seen on the screen and
                                      in the listings)
    Header file ctc.h          5.0.10 (was 5.0.9, seen in the ctc.h comments)
    Configuration file ctc.ini 5.0.10 (was 5.0.9, seen in the ctc.ini header)
    CTC++ to HTML Converter    1.7    (was 1.6, seen in the header of the
                                      Perl script ctc2html[.pl] itself)

The corrections and enhancements in this version are:

- On Windows platforms the CTC++ package:

  -- as before, can be used with Visual C++
  -- now, can also be used with Borland C++ and with GNU gcc/g++
  -- now, the use of all the 'cl', 'bcc32' and 'gcc/g++' compilers with
     CTC++ is available straight away after the installation
  -- the installation arrangements of the tool have been adjusted
  -- the CTC++/Visual Studio Integration Kit has been enhanced, see its
     own version.txt file for more information

- The case and default labels of a switch statement are now instrumented
  in a new way. A case/default label will get an execution hit only if
  it has been entered directly from the switch statement. It will not
  get an execution hit, if it has been entered by falling through from
  the previous case/default label. For example,

     switch(...) {
     ...
     case 5: ... /* possibly some code, falls through */
     case 6: ... /* when entered by falling through, the 'case 6:' counter
                    is not incremented */

  The new instrumentation is more strict and can lower the TER of existing
  test suites. The old style instrumentation can be forced, if desired, by
  defining the macro CTC_CASE_FALL_THROUGH_LOOSE.

- The preprocessor is now able to handle correctly 'if(condition)' statements
  where the condition is a declaration (possible in C++). For example,

     if (int x = f())

- In order to better support certain compilers (encountered in CTC++/Host-
  Target, where the cross-compiler needs to be "teached" to CTC++), some
  information is no more mandatory in the configuration file ctc.ini:

  -- With some C/C++ preprocessors, there is no way to give a name to the
     preprocessed file. For that reason, %RESULT% is no more mandatory in
     the configuration parameters PREPROC_C and PREPROC_CXX.
  -- Some compilers do not have an option for naming the compiled object
     file. For that reason, an option is not mandatory in the configuration
     parameter OPT_COMP_OUT.

- In the preprocessor, it is possible to specify certain additional phases,
  by setting one or more of the following environment variables:

  -- CTC_AFTER_CPP    (specifies the after C/C++ preprocessing step)
  -- CTC_AFTER_INSTR  (specifies the after instrumenting step)
  -- CTC_AFTER_COMP   (specifies the after C/C++ compiling step)

  If any of these environment variables is non-empty, it is assumed to be
  a name of an executable program, (e.g. a batch file) and it is invoked
  with certain parameters (relevant file names, etc.).

  See the file i-addon.txt in the Doc subdirectory of the installation
  directory for more information how this capability can be used to deal
  with some problematic (problematic for CTC++) compilers. This capability
  was primarily developed for CTC++/Host-Target to get CTC++ and the
  cross-compiler to co-operate more easily.

- In the preprocessor, there are a couple of bug corrections and
  enhancements regarding the EXCLUDE / NO_EXCLUDE configuration
  parameters:

  -- Besides directories, file(s) can also be excluded / no-excluded (for
     example, subdir/timer.cc). (This was a documentation error. Excluding/
     no-excluding has not been limited to directories only.)
  -- Fixed a bug which caused a directory name ending with a path separator
     ('\' or '/') to have no effect whatsoever (for example, /opt/).
  -- Fixed a bug on Windows platforms, where an (absolute) directory
     or file name starting with a path separator ('\' or '/'), i.e.
     without a drive letter, had no effect whatsoever. Now for example
     \dir2\*.c behaves the same as D:\dir2\*.c, if the current drive is D:
  -- On all platforms, . (current directory) and .. (parent directory)
     can be used (for example, ../..)
  -- On all Windows platforms (incl. Windows NT/2000), the Windows 9x
     style shortcuts ..., ...., ....., and so forth can be used.

  For more information about the EXCLUDE and NO_EXCLUDE configuration
  parameters, see chapter 10.4.32 in the CTC++ User's Guide.

- Fixed a bug when handling long macro definitions (or other long 
  preprocessing directives) appearing on a single line, i.e. without
  line continuation characters. The bug caused CTC++ to behave somewhat
  undeterministically. For example, the compiler could find syntax errors
  in the instrumented code or CTC++ could itself report an error. Note
  that usually, after the initial C/C++ preprocessing phase, there are
  no macros left when CTC++ starts the instrumenting phase. One example
  where the macro definitions are still present in the program, is the
  -g3 option of gcc and g++.
  
- The __leave statement of the Microsoft dialect is now instrumented in
  the same way as other similar jumps (break, goto, throw, ...).

- In the CTC++ postprocessor, it is no more required each (source)
  datafile to have a corresponding symbolfile when combining (adding)
  datafiles (the -a option). For example,

     ctcpost old.dat new.dat -a combined.dat

  no more requires the presence of old.sym and new.sym files.

- The ctc2html utility now checks that its input file is a valid execution
  profile listing (of ctcpost) and gives an error message if it is not,
  (for example, if it's an untested code listing). 
  
- Fixed a bug which caused ctc2html to crash ("illegal division by zero")
  in the extreme case that the number of measurement points in the profile
  listing was zero. This could happen, for example, if the listing was
  constrained so that there were no source files at all, or the remainining
  ones consisted of declarations only.

- Corrected a color problem in the ctc2html utility. In the fourth frame
  (the source file), the lines of the original source file with inadequate
  testing are highlighted in red color. However, there was such a bug
  that the original red color of these lines did not turn to black even
  though additional tests would have implied it.

- Fixed a bug in ctc2html which sometimes caused bad hyperlinks in the
  second frame (Files / Functions Section) and the third frame (Execution
  Profile Listing). This could happen with line directives under special
  circumstances. However, most line directives were not problematic to
  ctc2html.

- ctc2html now lists the names of those source files that could not be
  converted to HTML format due to duplicate file names. This can happen
  if there are two or more source files with the same name in different
  directories, for example, util.cc and ../common/util.cc. Because there
  can be only one file named util.cc.html in the CTCHTML directory, only
  the first of the util.cc files encountered by ctc2html is converted to
  HTML format. The hyperlinks of the second util.cc (in the second and
  third frames) link to the list of duplicate names (to the indexF.html
  file).

- Fixed a bug in the CTC++ installation/uninstallation program on Windows
  NT and Windows 2000 (there was no bug on Windows 9x). The installation
  (as well as the uninstallation) program modifies the PATH environment
  variable. However, if PATH contained references to other environment
  variables, for example %SystemRoot%, PATH became partially invalid,
  because these references did not work any more.

  In principle, the same bug could also affect the environment variables
  INCLUDE and LIB, but they rarely reference other environment variables.

- On Windows platforms, the installation program no more modifies the
  Visual C++ specific environment variables INCLUDE and LIB. These
  environment variables are not needed by CTC++ to find the header file
  ctc.h and the CTC++ import library, if the configuration parameters
  OPT_ADD_COMPILE and LIBRARY are correctly set in the configuration
  file(s). (On Windows, the CTC++ installation directory is referenced 
  through the environment variable CTCHOME. On Linux and Unix, the
  installation makefile modifies these configuration parameters so that
  they reference the correct directories.)

- Preliminary support for instrumenting 64-bit applications on HP-UX and
  Solaris platforms. Not included in the delivery packages, but please
  ask Testwell for more information, if you are interested.

- CTC++ User's Guide is upgraded to version 5.0.10 level (available in PDF
  format in the delivery package, in the Doc subdirectory of the CTC++
  installation directory)


Version 5.0.9 (10 July 2002)
----------------------------

This revision 5.0.9 of CTC++ has the following version numbers in its
components:

    Preprocessor               5.0.9 (was 5.0.8, seen on the screen)
    Run-time libraries         5.0.8 (seen by the 'ident' command applied
                                     on the library in some environments)
    Postprocessor              5.0.8 (seen on the screen and in the listings)
    Header file ctc.h          5.0.9 (was 5.0.8, seen in the ctc.h comments)
    Configuration file ctc.ini 5.0.9 (was 5.0.8, seen in the ctc.ini header)
    CTC++ to HTML Converter    1.6   (was 1.5, seen in the header of the
                                     Perl script ctc2html[.pl] itself)

The run-time libraries and the postprocessor are the same as in v5.0.8.

The corrections and enhancements in this version are the following:

- Corrected a bug in the CTC++ preprocessor where the EXCLUDE settings
  were not always honored. For example, if the code of a function body
  was assembled by including other files in it, the included portions
  could in some situations get instrumented even though the overall
  EXCLUDE settings would have advised not to instrument the code coming
  from the included file.

- In the preprocessor, the '*' wildcard character in EXCLUDE / NO_EXCLUDE
  configuration parameters is now better handled. Especially, '*' can now
  be used with directory names. Previously, only simple wildcards like
  "*.h" could be used. For example, the following exclude settings are
  now possible:

     D:\Project\Common\*.inc
     D:\Project2\*\System
     D:\Project3\Common\*.*  // almost the same as D:\Project3\Common
                             // (extensionless file names not excluded here)
 
  Note that '*' is still the only wildcard supported.

- Corrected a bug in the preprocessor regarding configuration parameter
  overriding. List type parameters could not be overridden by an empty
  value. For example, the following is now handled correctly:

     OPT_ADD_COMPILE =

  where '=' means overriding and an empty value means that a possible
  previous value should be removed. This bug affected only list type
  configuration parameters (possibly having more than one value separated
  by commas), but not non-list parameters (having a single value).

- Corrected a bug in the preprocessor which caused the line number of
  a special counter to be that of the next line in listings. Special
  (or own) counters may be added by the pragma CTC COUNT.

- Fixed a problem where the preprocessor could sometimes crash on some
  platforms, if the argument of the pragma CTC COUNT or CTC DETACH was
  missing. The argument of CTC COUNT is (still) allowed to be empty
  (although it's not very descriptive), but the argument of CTC DETACH
  is mandatory: a datafile name enclosed in quotation marks (").

- A couple of enhancements in the HTML files generated by the ctc2html
  utility.
  -- The names and timestamps of ALL symbolfiles and datafiles are now
     shown at the beginning of the first frame. Previously, only one
     symbolfile and one datafile were shown even if more than one was used.
  -- A list of chosen sourcefile(s) is now shown at the beginning of the
     first frame. This list is not shown if ALL source files are chosen
     (i.e. the user has NOT narrowed the instrumented source files shown
     in the listing).

- An enhanced version of the CTC++/Developer Studio Integration Kit
  is released. See version.txt in the %CTCHOME%\devstud directory
  (distributed only with CTC++ for Visual C++ on Windows 2000/NT/98/95).
  Specifically, CTC+ should now be smoothly usable for Symbian code which
  is compiled with Visual C++ and run in Symbian emulator on Windows.

- Fine-tuned some settings in the Windows/Visual C++ version of the
  ctc.ini configuration file:
  -- Added "*.inl" to the default EXCLUDE setting. On this platform, when
     certain types of programs are used, there can be a lot of code coming
     from the system's .inl files, causing the test coverage to become
     very low.
  -- Added /DCTC_CLIKE_MCOND to the default OPT_ADD_COMPILE setting.
     As a result, the VC++ compiler no more gives certain annoying
     warnings in some situations when compiling code instrumented with
     multicondition coverage and the VC++ warning level being 3 or higher.

- CTC++ User's Guide, which is available in PDF format in the delivery
  package, is still at v5.0.8 level. However, the needed modications to it
  are quite marginal and can actually be concluded from this version.txt.
  The latest paper version of the User's Guide it at v5.0.6 level.


Version 5.0.8 (9 May 2002)
---------------------------

This revision 5.0.8 of CTC++ has the following version numbers in its
components:

    Preprocessor               5.0.8 (was 5.0.7, seen on the screen)
    Run-time libraries         5.0.8 (was 5.0.6, seen with the 'ident'
                                     command applied on the library in
                                     some environments)
    Postprocessor              5.0.8 (was 5.0.6, seen on the screen and
                                     in the listings)
    Header file ctc.h          5.0.8 (was 5.0.6, seen in the ctc.h
                                     comments)
    Configuration file ctc.ini 5.0.8 (was 5.0.6, seen in the header of 
                                     the ctc.ini file)
    CTC++ to HTML Converter    1.5   (was 1.4, seen in the header of the
                                     Perl script ctc2html[.pl] itself)

The corrections and enhancements in this version are:

- Corrected a bug which caused the preprocessor to wrongly report a syntax
  error if there was one of the keywords class, struct or union in an
  expression and enclosed within braces ({ }). For example,

     int T[] = {1, 2, sizeof(struct hdr)};   // Syntax error ...

- Corrected a bug which caused the loss of the function end counters if the
  function end brace (}) was immediately preceded (i.e. not within a block)
  by a conditionally executed goto, return or throw statement. For example,

     void foo() {
        ...
        if (B) throw "error";
     }                               // no function end counters here

  However, the following was handled correctly:

     void foo() {
        ...
        if (B) { throw "error"; }
     }                               // function end counters ok

- Corrected a bug in the postprocessor which caused a symbol file open
  error if the symbol file name was explicitly given on the command line
  but without the extension (.sym). Now, CTCPost is able to to add the
  extension .sym to the given file name if needed.

- Enhanced the preprocessor to better handle the double quotation marks
  (") at the command line. For example, in the following command

      ctc ... cl ... /V\"v1.2.3\" ... somefile.c

  the operating system shell has already handled the command line and
  what CTC++ sees is just /V"v1.2.3" which previously caused loss of
  the quotation marks in the version string. Now, CTC++ re-enforces the
  backslashes before emitting the preprocessing, compiling or linking
  command.

  On Linux and Unix platforms also the single quotation marks (') at
  the command line are now handled in this way.

- The preprocessor now preserves the line numbers of the original
  source file. Previously, the line numbers in the instrumented file
  could be quite different from the original ones. This may be a useful
  property if line numbers are shown in some message of a compiler or
  a debugger, for example. 

- To prevent compiling errors in multicondition coverage instrumentation,
  the subconditions are now converted to bool (by static_cast) in C++.
  Casting to int (introduced in v5.0.5 to avoid some rare ambiguousness
  problems with the 'operator &&') was not always allowed, for example
  when using "smart pointers".

- The pragmas CTC INIT and CTC QUIT are now properly handled. Due to a
  bug in the ctc.h file these pragmas had previously no effect whatsoever.
 
- The timing macros CTC_TIMER_IMPORT and CTC_TIMER_API in the ctc.h file
  are now better prepared to handle the clock() function (the default
  execution cost measurement function). Especially, on Windows Visual C++
  platform, the clock function may either reside in a DLL or come from
  a static-link library (depending on the compiler option used). Previously,
  compiling or linking errors could sometimes happen.

- Function coverage instrumentation is now sufficient for the ctc2html
  utility to produce a valid HTML document. Decision coverage instrumentation
  is no more a minimum requirement. This enhancement was already present
  in the previous version of ctc2html (v1.4), but was inadvertently omitted
  from the documentation at that time.

- Several enhancements and improvements in the HTML files generated by the
  ctc2html utility.
  -- More "color coding" added to indicate inadequate testing. For example,
     the TER lines are now shown in red, if TER (Test Effectiveness Ratio)
     is below the specified threshold per cent.
  -- The heading "Execution Profile Listing" is now shown in the third frame
     as well as a summary at the end of the frame.
  -- The new column headers START/TRUE, END/FALSE, LINE and DESCRIPTION
     facilitate understanding of the meaning of the counters in third frame.
     These headers are similar to the textual profile listing.
  -- Counter values up to 999999 are now shown in exact form. Previously,
     values greater than or equal to 1000 were shown in exponential format
     (in the third frame only). 

- Corrected a problem which prevented linking of CTA++ and CTC++ run-time
  libraries into the same executable. Such linking is needed when a CTA++
  test bed is being built, and some portions have been instrumented with CTC++.
  This problem occurred on HPUX, Linux and Solaris (but not on Windows). On
  HPUX and Linux this linking problem gets resolved by taking this version
  (v5.0.8) of the CTC++ library (libctc.a) into use (or by using CTA++ v2.3.1).
  On Solaris, for the joint use of CTA++ and CTC++, please ask Testwell for
  a separate workaround for this problem.

- On Windows 2000 platform corrected the uninstall procedure in a situation
  when also the license key driver wns27.sys needed to be uninstalled.

- Fine-tuned the Visual C++ and gcc/g++ options in the configuration 
  file ctc.ini (in related delivery packages).

- CTC++ User's Guide upgraded to version 5.0.8 level (available in PDF format
  in the delivery package - the latest paper version available is v5.0.6).


Version 5.0.7 (22 January 2002)
-------------------------------

In CTC++ v5.0.7 upgrade only the CTC++ Preprocessor program file is new,
all the other files are as with v5.0.6. This version is made available
on Solaris platform only.

- Introduced a new command-line option -no-templates. If this option is
  used, all templates are left uninstrumented as if they were enclosed
  between the pragmas CTC SKIP and CTC ENDSKIP.

- Better handling of non-standard suffixes of integer and floating
  constants. An integer or a floating constant is no more split into
  two parts if it contains any suffixes beyond the standard u, U, l, L,
  f and F suffixes. For example, 123i64 or 1.0j are now accepted.


Version 5.0.6 (10 October 2001)
-------------------------------

This revision 5.0.6 of CTC++ has the following version numbers in its
components:

    Preprocessor               5.0.6 (was 5.0.5, seen on the screen)
    Run-time libraries         5.0.6 (was 5.0.5, seen with the 'ident'
                                     command applied on the library in
                                     some environments)
    Postprocessor              5.0.6 (was 5.0.5, seen on the screen and
                                     in the listings)
    Header file ctc.h          5.0.6 (was 5.0.5, seen in the ctc.h
                                     comments)
    Configuration file ctc.ini 5.0.6 (was 5.0.5, seen in the header of 
                                     the ctc.ini file)
    CTC++ to HTML Converter    1.4   (was 1.3, seen in the header of the
                                     Perl script ctc2html[.pl] itself)

The corrections and enhancements in this version are:

- FLEXlm based floating license control is possible on Windows and Linux,
  too. Now, FLEXlm is supported on all platforms.

- IP address based node-locked license control is possible on Windows,
  too. Now, technically, all supported platforms have this option (e.g.
  evaluation copy deliveries).

- Added a special EXCLUDE / NO_EXCLUDE setting '*.'. It matches all
  extensionless file names, for example such header files. This is now
  added to the default EXCLUDE settings in the ctc.ini file.

- Corrected a bug in the preprocessor which caused a "Bad identification
  stamp" run-time error later when running an instrumented program. The
  bug occurred provided that the extension .SYM in the symbol file name
  (given by the -n option) was in all upper case (or at least one letter
  was in upper case). This bug appeared on the Windows platform only.

- Corrected a problem in the handling of long wide string literals. The
  CTC++ Preprocessor may split them into two (or more) parts. For example,
  L"head...tail" is now correctly split into L"head..." L"tail". This
  was a problem with some compilers only.

- Added new compiler/linker sections to the ctc.ini configuration file
  on the Linux platform to support cc and c++ commands, too.

- Corrected a bug in the postprocessor which caused a program crash
  after a listing file open error. Now, an appropriate error message
  is given after the error.

- Corrected a bug in the run-time library when handling the environment
  variable CTC_DATA_PATH. A directory name given without a trailing path
  separator, for example 'SET CTC_DATA_PATH=D:\DATA' on Windows, caused
  a run-time error. Now, the trailing path separator in the CTC_DATA_PATH
  value may or may not be included.

- Changed the run-time library in its handling of temporary files. Now,
  in some compilation environments no more give annoying messages of it.

- Added option '-n split-number' to the ctc2html utility by which the
  generated HTML files can be split into a given number of smaller files.
  This can be used in large projects for getting browsers to load the
  pages faster.

- Added numerous enhancements and improvements to the ctc2html generated
  HTML files. For example, the first frame of the second window now has
  file links (in addition to function links), the links in the second
  frame of the first window are now capable of re-opening the second window
  should it have been closed for some reason, and summary information has
  been added to end of the first frame.

- CTC++ User's Guide upgraded to version 5.0.6 level (available in PDF
  format in the delivery package).


Version 5.0.5 (17 April 2001)
-----------------------------

This is a small upgrade to CTC++ 5.0.5 on Windows 2000/NT/98/95 
Visual C++ platforms. This upgrade is "silent" in the sense that the
version number 5.0.5 remains unchanged. The changes in this version
are:

- The CTC++ run-time library (ctcmsnt.dll) is now compatible with
  Visual C++ 5, too. The library of the previous release was compatible
  only with Visual C++ 6.
  
- The CTC++ run-time library now gives an error message if the executable
  has been instrumented with an incompatible CTC++ 4.x version.

- The ctcvars.bat file now works on Windows 2000/NT, too. (ctcvars.bat is
  primarily used on Windows 9x to set the environment for CTC++. It is
  rarely needed on Windows 2000/NT where the system environment variables
  are used for setting the environment.)

- A couple of bugs in the Microsoft Developer Studio Integration of CTC++
  has been fixed. See version.txt in the devstud subdirectory (distributed
  only with CTC++ for Visual C++ on Windows 2000/NT/98/95).


Version 5.0.5 (12 March 2001)
-----------------------------

This revision 5.0.5 of CTC++ has the following version numbers in its
components:

    Preprocessor               5.0.5 (seen on the screen)
    Run-time libraries         5.0.5 (seen with the 'ident' command
                                     applied on the library in some
                                     environments)
    Postprocessor              5.0.5 (seen on the screen and in the
                                     listings)
    Header file ctc.h          5.0.5 (seen in the ctc.h comments)
    Configuration file ctc.ini 5.0.5 (seen in the header of the ctc.ini
                                     file)
    CTC++ to HTML Converter    1.3   (seen in the header of the Perl
                                     script ctc2html[.pl] itself)

The corrections and enhancements in this version are:

- Added a new pragma, #pragma CTC DETACH "<datafile name>". This pragma
  facilitates situations where a run-time library, containing one or more
  instrumented source files, has to be freed programmatically. With this
  pragma the CTC++ run-time library is advised not to access the counters
  of the files later, because they are no more accessible. The pragma is
  usually used together with the CTC APPEND pragma, for example 

     #pragma CTC APPEND
     #pragma CTC DETACH "e:\\project1\\code\\dynlib5.dat"
     /* now freeing the library from memory... */
   
  See the file detach.txt in the Doc subdirectory of the installation
  directory for more information.

- Fixed a bug in the postprocessor which caused a wrong number of source
  files and source lines to be shown when producing multiple listings
  with a single command. Now, for example, the following command shows
  the correct number of files and lines in the two listings:

     ctcpost -s sum.lis -p prof.lis

- In multicondition coverage instrumentation the subconditions are
  casted to int to avoid some rare ambiguousness problems with the
  'operator &&' (in C++).

- Trailing blanks of configuration parameters are now removed.
  Previously, they could sometimes cause problems, for example in
  the TMP_DIRECTORY parameter.

- In the configuration parameters PREPROC_C and PREPROC_CXX it is now
  allowed that %FLAGS%, i.e. the placeholder for preprocessor options,
  is missing. This makes it possible to replace the preprocessing for
  example with a copy:

     PREPROC_C = copy %FILE% %RESULT%

  See the file no_cpp.txt in the Doc subdirectory of the installation
  directory for more information.

- Corrected and enhanced handling of asm blocks of various C/C++
  dialects (C++, gcc, Microsoft and Borland)

- Enhanced the CTC++ preprocessor to handle various gcc extensions:
  blocks within expressions, function, variable and type attributes,
  and the operators <? and >?. The gcc keywords __asm__, __attribute
  and __attribute__ are recognized. Note that these extensions are
  not instrumented, just skipped. Further, it should be noted that
  this does not indicate full support for all possible gcc extensions.

- CTC++ User's Guide is now available in PDF format (Portable Document
  Format). PDF files can be viewed using the Adobe Acrobat Reader
  software. See the file ctc50ug.pdf in the Doc subdirectory of the
  installation directory. The guide is at the level of CTC++ version
  5.0 with some minor typographical adjustments.

- Note of a documentation bug: CTC++ v5 User's Guide says that K&R 1
  style function definitions "are not instrumented" or "are not
  supported". However, there is more than that. Such function definitions
  must not be given as input to CTC++, because the parsing goes wrong.

- Introducing Kernelcoverage. This is included in a separate enhanced
  CTC++ package called "CTC++ Host-Target & Kernelcoverage".


Version 5.0.4 (23 November 2000)
--------------------------------

In the CTC++ v5.0.4 upgrade only the CTC++ Preprocessor program file is new,
all the other files are as in v5.0.3.

- Enhanced the CTC++ Preprocessor to handle braces within return expressions,
  for example

     return ( { ... ;} );

  Many C/C++ compilers do not accept the above construct but at least gcc
  does and the motive in making this enhancement to the source code parsing
  is specifically gcc.

- Corrected a bug in the handling of wildcards at the command-line level,
  for example 

     ctc cl -c *.c

  This bug was introduced into v5.0.3 (not present in earlier versions). 

- Corrected a bug in the new handling of source file time stamps in symbol
  files introduced into v5.0.3. The bug could occasionally cause a program
  crash in some environments when re-instrumenting a source file.


Version 5.0.3 (13 November 2000)
--------------------------------

In the CTC++ v5.0.3 upgrade only the CTC++ Preprocessor program file and
the ctc.h file are new, all the other files are as with v5.0. 

- New handling of source file time stamps in symbol files. Now when
  a file is reinstrumented and is not changed at all (as CTC++ sees
  it and maintains in the symbol file: line numbers are the same,
  instrumentation mode is the same, there is the same code on the same
  lines), the file's instrumentation time stamp is kept the same as it
  was in the previous instrumentation. It follows from this that previously
  collected test data will not be lost just because of new instrumentation.
  This is a useful property, if a file is reinstrumented and recompiled
  for example because of a different compiler optimization or other
  compiler options.

- A very marginal correction to the ctc.h file: removal of one needless
  semicolon (;), which was not accepted by some compilers.

- Introducing the CTC++/Developer Studio Integration Kit for CTC++ v5.x
  on Windows NT VC++ platform, functionally quite the same as there was
  on CTC++ v4.x.


Version 5.0.2 (14 September 2000)
---------------------------------

In CTC++ v5.0.2 upgrade only the CTC++ Preprocessor program file is new,
all the other files are as with v5.0. 

- Enhanced the CTC Preprocessor to handle better the -D compilation switch
  when '"'s are used. An example

     ...>ctc ... gcc ... -DFOO=\"bar\" ... somefile.c

  In the above kind of situation the operating system shell has handled
  the '\"'s and CTC++ sees ... -DFOO="bar" ... . Because CTC++ needs to
  emit certain C-preprocessing and compilation commands (the ones which
  you can see by -v option), there is now special handling with the -D
  option: If the -D option argument contains '"'s they are encorfed to
  '\"'s on the command line, which CTC++ emits, and all is fine.


Version 5.0.1 (6 September 2000)
--------------------------------

In CTC++ v5.0.1 upgrade only the CTC++ Preprocessor progam file is new,
all the other files are as with v5.0. 

- When running the CTC.EXE v5.0.1 with -V option in the tool header box
  the text "5.0.1" is shown. The previous CTC.EXE v5.0 showed "5.0" there.

- Corrected a bug on Windows platform where '/' was not recognized as
  possible directory separator (only '\' was). The bug showed up for example
  in the following situation

     ...> ctc cl -c e:/somedir/projdir/file3.c

  where the instrumented object file became to wrong directory or its
  creation might have failed alltogether. Now, in the above situation, the
  instrumented object file comes correctly to the current directory.

- Corrected a bug in configuration parameter handling when a list type
  configuration parameter was extended. The bug showed for example in the
  following situation (it was essential that before '+' there was no space):

     ...> ctc -C EXCLUDE+*.inl,*.inc cl ...

  This behaved as if the user has given

     ...> ctc -C EXCLUDE=*.inl,*.inc cl ...

  The error was that the ctc.ini file's EXCLUDE setting was overridden,
  not extended as it should have been.

- Corrected one "beauty spot" when in the beginning of a primary source
  file there had been #include directives to other files, but those other
  files did not bring any code that had been instrumented. In this
  situation the execution profile listing could contain a redundant #line
  directive to the primary source file. Now such redundant #line directive
  does not come any more.


Version 5.0 (16 June 2000)
--------------------------

A "silent" bug correction:

- Corrected a bug in CTC++ Preprocessor (CTC.EXE). The bug was related
  when BC++ compiler was used and thus BORLAND dialect (DIALECT_C and
  DIALECT_CXX in CTC.INI file) had to be specified in CTC.INI file.
  In newer BC++ compilers the C-preprocessed file syntax had changed
  (in BC++ 5.0 it still was in the old way while in BC++ 5.4 it already
  is in the new way). Along with this correction CTC++ can now handle both
  C-preprocessed file syntaxes. Further, still in BORLAND dialect, a bug
  was corrected when there were spaces in the original source file name.


Version 5.0 (19 April 2000)
------------------------------

This revision 5.0 of CTC++ has the following version numbers in its
components:

    Preprocessor               5.0 (seen on screen)
    Run-time libraries         5.0 (seen with 'ident' command applied
                                   on the library in some environments)
    Postprocessor              5.0 (seen on screen and in listings)
    Header file ctc.h          5.0 (seen on ctc.h comments)
    Configuration file ctc.ini 5.0 (seen in the header of the ctc.ini-
                                   file)
    CTC++ to HTML Converter    1.3 (seen in the header of the Perl
                                   script ctc2html[.pl] itself)

This CTC++ 5.0 is a major rewrite and upgrade to the previous CTC++ 4.3.

In big picture this version gives the same coverage reports as before
(except 'interface coverage' has been dropped), but the usage has become
simpler. The actual instrumentation technique, which has been found to
be very robust, is effectively unchanged.

The instrumentation phase is now connected tightly to the compilation
command. The idea is that when the original compilation command made
the compilation to an object file, now we use "ctc-compilation", which
first instruments the source file and then compiles it to an object file.

All this works smoothly also with existing makefiles.

There are the following major changes and remarks in this version:

- There is no more a concept of "monitor", which specified a certain set
  of source files. Previously the instrumentation, the test runs and
  producing of coverage listings were done with respect of a "monitor".
  Now each source file is instrumented independently of the other source
  files. The instrumented program just has some instrumented object files
  and CTC++ run-time library linked into it.

- Along with dumping of the monitor concept there is no more so called
  "update instrumentation of a monitor". Now the same functionality is
  obtained by doing the instrumentation by a makefile and let the make
  utility determine the files that need to be re-instrumented.

- CTC++ Preprocessor now has only command line mode user interface.
  Interactive and response file modes have been dropped.

- CTC++ Postprocessor now has only command line mode user interface.
  Interactive mode has been dropped.

- CTC++/Host-Target add-on component has been partially re-implemented
  (due to internal data structure changes), but from the user's point of
  view the functionality is as before.

- CTC++ no more provides "interface coverage" measure.

- In CTC++ Preprocessor the options -skipinclude and -skipinline have
  been removed. Now similar functionality is obtained by other means
  (EXCLUDE and NO_EXCLUDE configuration parameters in ctc.ini file).

- Configuration parameters in ctc.ini file can be fine-tuned by command
  line parameters on case by case bases where needed.

- When timing instrumentation is used, there are now two options how the
  timing (execution cost measuring) can be collected. The time spent
  in the called timer-instrumented functions can be either included or
  excluded from the cumulative time of the caller function.

- In CTC++ Postprocessor there is no more so called merging of execution
  profile listings. Now the merging the counters of separate test runs
  takes place simple by just providing multiple datafiles to CTC++
  Postprocessor. Now, also when the "granularity" of the execution profile
  listing is one file (previously all the files of a monitor), there no
  more is so much need for the CTC 4.3 kind of merging of profile listings
  of separate monitors.

- The internal data structures of symbolfile, datafile and configuration
  file are not compatible with previous CTC++ 4.3 version. 

- The CTC++ to HTML Converter (ctc2html) now produces the html files
  with "index", ie. index.html, indexA.html, etc. ; no more with
  prefix "report".

- Some bugs have been fixed, notably the following:

  -- The following type of function definitions were silently skipped
     by CTC++ Preprocessor, but now recognized and instrumented properly
     
        extern "C" int foo(...) {...}

     Note that the following was handled ok

        extern "C" {int foo(...) {...} ... }

  -- The timing listing no more gets cut (rest of the listing was not
     outputted) in a certain situations when in the instrumented file
     there was an #include to another file, which made visible code that
     was instrumented.

  -- for getting "timing" instrumentation on there had to be at least
     "decision coverage" instrumentation also on ; now plain "timing"
     instrumentation request is sufficient (implies "function coverage"
     instrumentation)

  -- In execution profile listing when reporting hits on case labels, the
     correct reporting is as in the following example:

                            5 switch ( i )
         0            -     8 case 2:      <--- before only "2:"
         1                  9 case 3:      <--- before only "3:"
         1                 10   break
         1                 11 case 5:
         1                 13   goto again
         0            -    16 default:     <--- before erroneously "case:"

  -- At instrumentation time 'unsigned long long' literals having postfix
     ULL are now recognized and handled ok.

----------

The previous v4.x/v3.x version are mentioned only by their release date.

Version 4.3 (25 September 1997)
Version 4.2.1 (2 December 1996)
Version 4.2 (6 September 1996)
Version 4.0.4 (2 June 1996)
Version 4.0.3 (2 January 1996)
Version 4.0.2 (12 December 1995)
Version 4.0.1 (25 November 1995)
Version 4.0 (4 April 1995)
Version 3.1.2 (25 August  1994)
Version 3.1.1 (10 August 1994)
(rest not listed)
